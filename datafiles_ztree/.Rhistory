vars <- aggregate(send_df$sends, list(send_df$ids), var)
vars
high_ids <- vars[vars$x >= median(vars$x)]$Group.1
low_ids <- vars[vars$x < median(vars$x)]$Group.1
high_ids <- vars[vars$x >= median(vars$x),]$Group.1
low_ids <- vars[vars$x < median(vars$x),]$Group.1
high_ids
length (high_ids)
length (low_ids)
k <- 3
df_round5 <- cur_df [cur_df$round_number_with_partner == 5,]
print ("Predict for all")
print (summary (lm (RelSend ~ my_trust_value + trust_value + AbsPartnerSend, data = df_round5)))
print (summary (lm (RelSend ~ my_reputation + partner_reputation + AbsPartnerSend, data = df_round5)))
print ("Predict for high variance")
print (summary (lm (RelSend ~ my_trust_value + trust_value + AbsPartnerSend, data = df_round5[df_round5$id %in% high_ids,])))
print (summary (lm (RelSend ~ my_reputation + partner_reputation + AbsPartnerSend, data = df_round5[df_round5$id %in% high_ids,])))
print ("Predict for low variance")
# df_round5 <- cur_df [cur_df$round_number_with_partner == 5,]
print (summary (lm (RelSend ~ my_trust_value + trust_value + AbsPartnerSend, data = df_round5[df_round5$id %in% low_ids,])))
print (summary (lm (RelSend ~ my_reputation + partner_reputation + AbsPartnerSend, data = df_round5[df_round5$id %in% low_ids,])))
type <- 1
all_df <- all_df_sender
if (type == 1) {
all_df <- all_df_receiver
}
for (k in 1:num_games) {
cur_df <- as.data.frame(all_df[k])
# cur_df <- rbind (as.data.frame(all_df_sender[k]), as.data.frame(all_df_receiver[k]))
print (paste("Type:", Type_names[type+1]))
print (paste("Process game:", GAME_NAMES[k]))
sends <- c()
ids <- c()
vars <- c()
for (user_id in 1:30) {
for (partner_id in 1:5) {
this_sends <- c()
this_pair <- cur_df[cur_df$id == user_id
& cur_df$partner_id == partner_id,]
if (nrow(this_pair) >= 1) {
this_sends <- c(this_sends, this_pair$RelSend)
# print (var (this_pair$RelSend))
sends <- c(sends, mean (this_sends))
ids <- c(ids, user_id)
}
}
}
# print (paste ("Mean of variance:", mean (vars[vars > 0], na.rm = TRUE)))
plot (sends ~ ids, ylim = c(0,1), ylab = "Send proportion", xlab= "Subject ID", main = paste(GAME_NAMES[k],":", Type_names[type+1]))
send_df <- as.data.frame(cbind (ids, sends))
vars <- aggregate(send_df$sends, list(send_df$ids), var)
# meanwhile focus on receiver only because the result for sender is already good
if (type == 1) {
high_ids <- vars[vars$x >= median(vars$x),]$Group.1
low_ids <- vars[vars$x < median(vars$x),]$Group.1
df_round5 <- cur_df [cur_df$round_number_with_partner == 5,]
print ("Predict for all")
print (summary (lm (RelSend ~ my_trust_value + trust_value + AbsPartnerSend, data = df_round5)))
print (summary (lm (RelSend ~ my_reputation + partner_reputation + AbsPartnerSend, data = df_round5)))
print ("Predict for high variance")
print (summary (lm (RelSend ~ my_trust_value + trust_value + AbsPartnerSend, data = df_round5[df_round5$id %in% high_ids,])))
print (summary (lm (RelSend ~ my_reputation + partner_reputation + AbsPartnerSend, data = df_round5[df_round5$id %in% high_ids,])))
print ("Predict for low variance")
# df_round5 <- cur_df [cur_df$round_number_with_partner == 5,]
print (summary (lm (RelSend ~ my_trust_value + trust_value + AbsPartnerSend, data = df_round5[df_round5$id %in% low_ids,])))
print (summary (lm (RelSend ~ my_reputation + partner_reputation + AbsPartnerSend, data = df_round5[df_round5$id %in% low_ids,])))
}
}
high_ids
vars
ids
sends
vars[is.nan(vars)] <- 0
vars <- ifelse (is.nan(vars),0,vars)
vars
vars <- ifelse (is.na(vars),0,vars)
vars
send_df <- as.data.frame(cbind (ids, sends))
vars <- aggregate(send_df$sends, list(send_df$ids), var)
vars [is.na(vars)] <- 0
vars
send_df <- as.data.frame(cbind (ids, sends))
vars <- aggregate(send_df$sends, list(send_df$ids), var)
vars
vars [is.na(vars)] <- 0
vars
all_df <- all_df_sender
if (type == 1) {
all_df <- all_df_receiver
}
for (k in 1:num_games) {
cur_df <- as.data.frame(all_df[k])
# cur_df <- rbind (as.data.frame(all_df_sender[k]), as.data.frame(all_df_receiver[k]))
print (paste("Type:", Type_names[type+1]))
print (paste("Process game:", GAME_NAMES[k]))
sends <- c()
ids <- c()
vars <- c()
for (user_id in 1:30) {
for (partner_id in 1:5) {
this_sends <- c()
this_pair <- cur_df[cur_df$id == user_id
& cur_df$partner_id == partner_id,]
if (nrow(this_pair) >= 1) {
this_sends <- c(this_sends, this_pair$RelSend)
# print (var (this_pair$RelSend))
sends <- c(sends, mean (this_sends))
ids <- c(ids, user_id)
}
}
}
# print (paste ("Mean of variance:", mean (vars[vars > 0], na.rm = TRUE)))
plot (sends ~ ids, ylim = c(0,1), ylab = "Send proportion", xlab= "Subject ID", main = paste(GAME_NAMES[k],":", Type_names[type+1]))
send_df <- as.data.frame(cbind (ids, sends))
vars <- aggregate(send_df$sends, list(send_df$ids), var)
vars [is.na(vars)] <- 0
# meanwhile focus on receiver only because the result for sender is already good
if (type == 1) {
high_ids <- vars[vars$x >= median(vars$x),]$Group.1
low_ids <- vars[vars$x < median(vars$x),]$Group.1
df_round5 <- cur_df [cur_df$round_number_with_partner == 5,]
print ("Predict for all")
print (summary (lm (RelSend ~ my_trust_value + trust_value + AbsPartnerSend, data = df_round5)))
print (summary (lm (RelSend ~ my_reputation + partner_reputation + AbsPartnerSend, data = df_round5)))
print ("Predict for high variance")
print (summary (lm (RelSend ~ my_trust_value + trust_value + AbsPartnerSend, data = df_round5[df_round5$id %in% high_ids,])))
print (summary (lm (RelSend ~ my_reputation + partner_reputation + AbsPartnerSend, data = df_round5[df_round5$id %in% high_ids,])))
print ("Predict for low variance")
# df_round5 <- cur_df [cur_df$round_number_with_partner == 5,]
print (summary (lm (RelSend ~ my_trust_value + trust_value + AbsPartnerSend, data = df_round5[df_round5$id %in% low_ids,])))
print (summary (lm (RelSend ~ my_reputation + partner_reputation + AbsPartnerSend, data = df_round5[df_round5$id %in% low_ids,])))
}
}
high_ids
vars
verifyReputationWithDubois (type = 0, round = 5)
verifyReputationWithDubois (type = 0, round = 6)
verifyReputationWithDubois (type = 0, round = 7)
verifyReputationWithDubois (type = 0, round = 8)
verifyReputationWithDubois (type = 0, round = 9)
verifyReputationWithDubois (type = 0, round = 10)
summary(dubois1$sent)
hist(dubois1$sent)
str(dubois1)
k
k <- 3
type <- 1
all_df <- all_df_sender
if (type == 1) {
all_df <- all_df_receiver
}
for (k in 1:num_games) {
cur_df <- as.data.frame(all_df[k])
# cur_df <- rbind (as.data.frame(all_df_sender[k]), as.data.frame(all_df_receiver[k]))
print (paste("Type:", Type_names[type+1]))
print (paste("Process game:", GAME_NAMES[k]))
sends <- c()
ids <- c()
vars <- c()
for (user_id in 1:30) {
for (partner_id in 1:5) {
this_sends <- c()
this_pair <- cur_df[cur_df$id == user_id
& cur_df$partner_id == partner_id,]
if (nrow(this_pair) >= 1) {
this_sends <- c(this_sends, this_pair$RelSend)
# print (var (this_pair$RelSend))
sends <- c(sends, mean (this_sends))
ids <- c(ids, user_id)
}
}
}
# print (paste ("Mean of variance:", mean (vars[vars > 0], na.rm = TRUE)))
plot (sends ~ ids, ylim = c(0,1), ylab = "Send proportion", xlab= "Subject ID", main = paste(GAME_NAMES[k],":", Type_names[type+1]))
send_df <- as.data.frame(cbind (ids, sends))
vars <- aggregate(send_df$sends, list(send_df$ids), var)
vars [is.na(vars)] <- 0
# meanwhile focus on receiver only because the result for sender is already good
if (type == 1) {
high_ids <- vars[vars$x >= median(vars$x),]$Group.1
low_ids <- vars[vars$x < median(vars$x),]$Group.1
df_round5 <- cur_df [cur_df$round_number_with_partner == 5,]
print ("Predict for all")
print (summary (lm (RelSend ~ my_trust_value + trust_value + AbsPartnerSend, data = df_round5)))
print (summary (lm (RelSend ~ my_reputation + partner_reputation + AbsPartnerSend, data = df_round5)))
print ("Predict for high variance")
print (summary (lm (RelSend ~ my_trust_value + trust_value + AbsPartnerSend, data = df_round5[df_round5$id %in% high_ids,])))
print (summary (lm (RelSend ~ my_reputation + partner_reputation + AbsPartnerSend, data = df_round5[df_round5$id %in% high_ids,])))
print ("Predict for low variance")
# df_round5 <- cur_df [cur_df$round_number_with_partner == 5,]
print (summary (lm (RelSend ~ my_trust_value + trust_value + AbsPartnerSend, data = df_round5[df_round5$id %in% low_ids,])))
print (summary (lm (RelSend ~ my_reputation + partner_reputation + AbsPartnerSend, data = df_round5[df_round5$id %in% low_ids,])))
}
}
k <- 3
cur_df <- as.data.frame(all_df[k])
# cur_df <- rbind (as.data.frame(all_df_sender[k]), as.data.frame(all_df_receiver[k]))
print (paste("Type:", Type_names[type+1]))
print (paste("Process game:", GAME_NAMES[k]))
sends <- c()
ids <- c()
vars <- c()
for (user_id in 1:30) {
for (partner_id in 1:5) {
this_sends <- c()
this_pair <- cur_df[cur_df$id == user_id
& cur_df$partner_id == partner_id,]
if (nrow(this_pair) >= 1) {
this_sends <- c(this_sends, this_pair$RelSend)
# print (var (this_pair$RelSend))
sends <- c(sends, mean (this_sends))
ids <- c(ids, user_id)
}
}
}
# print (paste ("Mean of variance:", mean (vars[vars > 0], na.rm = TRUE)))
plot (sends ~ ids, ylim = c(0,1), ylab = "Send proportion", xlab= "Subject ID", main = paste(GAME_NAMES[k],":", Type_names[type+1]))
send_df <- as.data.frame(cbind (ids, sends))
vars <- aggregate(send_df$sends, list(send_df$ids), var)
vars [is.na(vars)] <- 0
# meanwhile focus on receiver only because the result for sender is already good
if (type == 1) {
high_ids <- vars[vars$x >= median(vars$x),]$Group.1
low_ids <- vars[vars$x < median(vars$x),]$Group.1
df_round5 <- cur_df [cur_df$round_number_with_partner == 5,]
print ("Predict for all")
print (summary (lm (RelSend ~ my_trust_value + trust_value + AbsPartnerSend, data = df_round5)))
print (summary (lm (RelSend ~ my_reputation + partner_reputation + AbsPartnerSend, data = df_round5)))
print ("Predict for high variance")
print (summary (lm (RelSend ~ my_trust_value + trust_value + AbsPartnerSend, data = df_round5[df_round5$id %in% high_ids,])))
print (summary (lm (RelSend ~ my_reputation + partner_reputation + AbsPartnerSend, data = df_round5[df_round5$id %in% high_ids,])))
print ("Predict for low variance")
# df_round5 <- cur_df [cur_df$round_number_with_partner == 5,]
print (summary (lm (RelSend ~ my_trust_value + trust_value + AbsPartnerSend, data = df_round5[df_round5$id %in% low_ids,])))
print (summary (lm (RelSend ~ my_reputation + partner_reputation + AbsPartnerSend, data = df_round5[df_round5$id %in% low_ids,])))
}
print (summary (lm (RelSend ~ my_trust_value + trust_value + AbsPartnerSend, data = df_round5[df_round5$id %in% high_ids,])))
print (summary (lm (RelSend ~ my_reputation + partner_reputation + AbsPartnerSend, data = df_round5[df_round5$id %in% high_ids,])))
print (summary (lm (RelSend ~ my_trust_value * trust_value +* AbsPartnerSend, data = df_round5[df_round5$id %in% high_ids,])))
print (summary (lm (RelSend ~ my_trust_value * trust_value * AbsPartnerSend, data = df_round5[df_round5$id %in% high_ids,])))
df_round5_high <- df_round5[df_round5$id %in% high_ids,]
plot (df_round5_high$RelSend ~ df_round5_high$my_trust_value)
summary (df_round5_high$RelSend)
plot (df_round5_high$RelSend)
plot (df_round5_high$RelSend ~ df_round5_high$my_reputation)
summary (lm (RelSend ~ my_trust_value + trust_value + AbsPartnerSend, data = df_round5[df_round5$id %in% low_ids,]))
df_round5_low <- df_round5[df_round5$id %in% low_ids,]
plot (df_round5_low$RelSend)
plot (df_round5_low$RelSend, ylim = c(0,1))
plot (df_round5_low$RelSend, ylim = c(0,1), col = "red")
point (df_round5_high$RelSend)
points (df_round5_high$RelSend)
plot (df_round5_low$RelSend ~ df_round5_low$my_trust_value)
plot (df_round5_low$RelSend ~ df_round5_low$my_reputation)
plot (df_round5_low$RelSend ~ df_round5_low$trust_value)
cor.test (df_round5_low$RelSend , df_round5_low$trust_value)
cor.test (df_round5_high$RelSend , df_round5_high$trust_value)
cor.test (df_round5_high$RelSend , df_round5_high$my_trust_value)
verifyTrustWithDuboisSimple(type = 0, round = 5)
verifyTrustWithDuboisSimple(type = 0, round = 6)
verifyTrustWithDuboisSimple(type = 0, round = 7)
verifyTrustWithDuboisSimple(type = 0, round = 8)
str(dubois1)
summary (dubois1$player_uid)
summary (dubois1$sender_uid)
summary (dubois1$receiver_uid)
verifyReputationWithDubois <- function (file_name, type = 0, round = 5) {
dubois <- read.csv("all_data/data_dubois.csv", sep = ";")
dubois1 <- dubois[1:1080,]
dubois1$send_back_pror <- ifelse(is.nan(dubois1$returned/dubois1$received), -1, dubois1$returned/dubois1$received)
last_action = dubois1[dubois1$period == round,]$sent/10
dubois_reputation <- c()
for (i in 1:nrow(dubois1)) {
cur_id <- dubois1[i,]$player_uid
cur_rep <- 0.5
if (dubois1[i,]$period == 1) {
cur_rep <- 0.5
} else {
cur_rep <- mean (c(dubois1[dubois1$player_uid == cur_id,]$sent[1:(i-1)]/10,
dubois1[dubois1$send_back_pror >= 0
& dubois1$player_uid == cur_id,]$send_back_pror[1:(i-1)]), na.rm = TRUE)
}
dubois_reputation <- c(dubois_reputation, cur_rep)
}
dubois1 <- cbind (dubois1, dubois_reputation)
last_rep <- c()
for (uid in unique (dubois1$player_uid)) {
actions <- dubois1[dubois1$player_uid == uid,]$send_back_pror
rep <- dubois1[dubois1$player_uid == uid,]$dubois_reputation[round -1]
last_rep <- c(last_rep, rep)
}
if (type == 1) {
# dubois1$trust <- ave (dubois1$sent_back_pror, dubois1$player_uid, FUN = calcTrust)
last_action = dubois1[dubois1$period == round,]$send_back_pror
}
last_rep <- last_rep [last_action >= 0]
last_action <- last_action [last_action >= 0]
plot (x = last_rep, y = last_action, xlab = paste("Reputation score before round ", round), ylab = paste("Sending behavior in round ", round))
lm2 <- lm(formula = last_action ~ last_rep)
abline (lm2, col = "red")
print (cor (last_action , last_rep))
print ("--")
print(summary (lm2))
}
verifyReputationWithDubois()
type <- 0
round <- 5
dubois <- read.csv("all_data/data_dubois.csv", sep = ";")
dubois1 <- dubois[1:1080,]
dubois1$send_back_pror <- ifelse(is.nan(dubois1$returned/dubois1$received), -1, dubois1$returned/dubois1$received)
last_action = dubois1[dubois1$period == round,]$sent/10
dubois_reputation <- c()
for (i in 1:nrow(dubois1)) {
cur_id <- dubois1[i,]$player_uid
cur_rep <- 0.5
if (dubois1[i,]$period == 1) {
cur_rep <- 0.5
} else {
cur_rep <- mean (c(dubois1[dubois1$player_uid == cur_id,]$sent[1:(i-1)]/10,
dubois1[dubois1$send_back_pror >= 0
& dubois1$player_uid == cur_id,]$send_back_pror[1:(i-1)]), na.rm = TRUE)
}
dubois_reputation <- c(dubois_reputation, cur_rep)
}
dubois1 <- cbind (dubois1, dubois_reputation)
last_rep <- c()
for (uid in unique (dubois1$player_uid)) {
actions <- dubois1[dubois1$player_uid == uid,]$send_back_pror
rep <- dubois1[dubois1$player_uid == uid,]$dubois_reputation[round -1]
last_rep <- c(last_rep, rep)
}
if (type == 1) {
# dubois1$trust <- ave (dubois1$sent_back_pror, dubois1$player_uid, FUN = calcTrust)
last_action = dubois1[dubois1$period == round,]$send_back_pror
}
last_rep <- last_rep [last_action >= 0]
last_action <- last_action [last_action >= 0]
plot (x = last_rep, y = last_action, xlab = paste("Reputation score before round ", round), ylab = paste("Sending behavior in round ", round))
lm2 <- lm(formula = last_action ~ last_rep)
abline (lm2, col = "red")
print (cor (last_action , last_rep))
print ("--")
print(summary (lm2))
dubois1$send_back_pror
dubois1$sent_back / dubois1$received
max (dubois1$sent_back / dubois1$received)
x <- dubois1$sent_back / dubois1$received
max[x[!is.nan(x)]]
max(x)
min (x)
x
x[!is.nan(x)]
summary (dubois1$period)
1080/30
verifyReputationWithDubois <- function (file_name, type = 0, round = 5) {
dubois <- read.csv("all_data/data_dubois.csv", sep = ";")
dubois1 <- dubois[1:1080,]
dubois1$send_back_pror <- ifelse(is.nan(dubois1$sent_back/dubois1$received), -1, dubois1$sent_back/dubois1$received)
last_action = dubois1[dubois1$period == round,]$sent/10
dubois_reputation <- c()
for (i in 1:nrow(dubois1)) {
cur_id <- dubois1[i,]$player_uid
cur_rep <- 0.5
cur_period <- dubois1[i,]$period
if (cur_period == 1) {
cur_rep <- 0.5
} else {
cur_rep <- mean (c(dubois1[dubois1$player_uid == cur_id,]$sent[1:(cur_period-1)]/10,
dubois1[dubois1$send_back_pror >= 0
& dubois1$player_uid == cur_id,]$send_back_pror[1:(cur_period-1)]), na.rm = TRUE)
}
dubois_reputation <- c(dubois_reputation, cur_rep)
}
dubois1 <- cbind (dubois1, dubois_reputation)
last_rep <- c()
for (uid in unique (dubois1$player_uid)) {
actions <- dubois1[dubois1$player_uid == uid,]$send_back_pror
rep <- dubois1[dubois1$player_uid == uid,]$dubois_reputation[round -1]
last_rep <- c(last_rep, rep)
}
if (type == 1) {
# dubois1$trust <- ave (dubois1$sent_back_pror, dubois1$player_uid, FUN = calcTrust)
last_action = dubois1[dubois1$period == round,]$send_back_pror
}
last_rep <- last_rep [last_action >= 0]
last_action <- last_action [last_action >= 0]
plot (x = last_rep, y = last_action, xlab = paste("Reputation score before round ", round), ylab = paste("Sending behavior in round ", round))
lm2 <- lm(formula = last_action ~ last_rep)
abline (lm2, col = "red")
print (cor (last_action , last_rep))
print ("--")
print(summary (lm2))
}
verifyReputationWithDubois()
verifyReputationWithDubois(type = 1)
verifyReputationWithDubois(type = 0, round = 4)
verifyReputationWithDubois(type = 0, round = 6)
verifyReputationWithDubois(type = 0, round = 7)
verifyReputationWithDubois(type = 01, round = 7)
verifyReputationWithDubois <- function (file_name, type = 0, round = 5) {
dubois <- read.csv("all_data/data_dubois.csv", sep = ";")
dubois1 <- dubois[1:1080,]
dubois1$send_back_pror <- ifelse(is.nan(dubois1$sent_back/dubois1$received), -1, dubois1$sent_back/dubois1$received)
last_action = dubois1[dubois1$period == round,]$sent/10
dubois_reputation <- c()
for (i in 1:nrow(dubois1)) {
cur_id <- dubois1[i,]$player_uid
cur_rep <- 0.5
cur_period <- dubois1[i,]$period
if (cur_period == 1) {
cur_rep <- 0.5
} else {
x <- dubois1[dubois1$player_uid == cur_id,]$send_back_pror[1:(cur_period-1)]
x <- x[x>=0]
cur_rep <- mean (c(dubois1[dubois1$player_uid == cur_id,]$sent[1:(cur_period-1)]/10,
x, na.rm = TRUE))
}
dubois_reputation <- c(dubois_reputation, cur_rep)
}
dubois1 <- cbind (dubois1, dubois_reputation)
last_rep <- c()
for (uid in unique (dubois1$player_uid)) {
actions <- dubois1[dubois1$player_uid == uid,]$send_back_pror
rep <- dubois1[dubois1$player_uid == uid,]$dubois_reputation[round -1]
last_rep <- c(last_rep, rep)
}
if (type == 1) {
# dubois1$trust <- ave (dubois1$sent_back_pror, dubois1$player_uid, FUN = calcTrust)
last_action = dubois1[dubois1$period == round,]$send_back_pror
}
last_rep <- last_rep [last_action >= 0]
last_action <- last_action [last_action >= 0]
plot (x = last_rep, y = last_action, xlab = paste("Reputation score before round ", round), ylab = paste("Sending behavior in round ", round))
lm2 <- lm(formula = last_action ~ last_rep)
abline (lm2, col = "red")
print (cor (last_action , last_rep))
print ("--")
print(summary (lm2))
}
verifyReputationWithDubois(type = 01, round = 7)
verifyReputationWithDubois(type = 0, round = 7)
dubois1[dubois1$send_back_pror == -1,]
nrow(dubois1[dubois1$send_back_pror == -1,])
verifyReputationWithDubois <- function (file_name, type = 0, round = 5) {
dubois <- read.csv("all_data/data_dubois.csv", sep = ";")
dubois1 <- dubois[1:1080,]
dubois1$send_back_pror <- ifelse(is.nan(dubois1$sent_back/dubois1$received), -1, dubois1$sent_back/dubois1$received)
last_action = dubois1[dubois1$period == round,]$sent/10
dubois_reputation <- c()
for (i in 1:nrow(dubois1)) {
cur_id <- dubois1[i,]$player_uid
cur_rep <- 0.5
cur_period <- dubois1[i,]$period
if (cur_period == 1) {
cur_rep <- 0.5
} else {
x <- dubois1[dubois1$player_uid == cur_id,]$send_back_pror[1:(cur_period-1)]
# x <- x[x>=0]
cur_rep <- mean (c(dubois1[dubois1$player_uid == cur_id,]$sent[1:(cur_period-1)]/10,
x, na.rm = TRUE))
}
dubois_reputation <- c(dubois_reputation, cur_rep)
}
dubois1 <- cbind (dubois1, dubois_reputation)
last_rep <- c()
for (uid in unique (dubois1$player_uid)) {
actions <- dubois1[dubois1$player_uid == uid,]$send_back_pror
rep <- dubois1[dubois1$player_uid == uid,]$dubois_reputation[round -1]
last_rep <- c(last_rep, rep)
}
if (type == 1) {
# dubois1$trust <- ave (dubois1$sent_back_pror, dubois1$player_uid, FUN = calcTrust)
last_action = dubois1[dubois1$period == round,]$send_back_pror
}
last_rep <- last_rep [last_action >= 0]
last_action <- last_action [last_action >= 0]
plot (x = last_rep, y = last_action, xlab = paste("Reputation score before round ", round), ylab = paste("Sending behavior in round ", round))
lm2 <- lm(formula = last_action ~ last_rep)
abline (lm2, col = "red")
print (cor (last_action , last_rep))
print ("--")
print(summary (lm2))
}
nrow(dubois1[dubois1$send_back_pror == -1,])
verifyReputationWithDubois(type = 0, round = 7)
verifyReputationWithDubois(type = 0, round = 8)
verifyReputationWithDubois(type = 0, round = 9)
verifyReputationWithDubois(type = 0, round = 10)
verifyReputationWithDubois(type = 1, round = 10)
verifyReputationWithDubois(type = 1, round = 9)
verifyReputationWithDubois(type = 1, round = 8)
verifyReputationWithDubois(type = 1, round = 7)
verifyReputationWithDubois(type = 1, round = 6)
verifyReputationWithDubois(type = 1, round = 5)
verifyReputationWithDubois(type = 1, round = 4)
verifyReputationWithDubois(type = 1, round = 3)
verifyReputationWithDubois(type = 0, round = 3)
verifyReputationWithDubois(type = 0, round = 4)
verifyReputationWithDubois(type = 0, round = 5)
verifyReputationWithDubois(type = 0, round = 6)
verifyReputationWithDubois(type = 0, round = 7)
verifyReputationWithDubois(type = 0, round = 8)
verifyReputationWithDubois(type = 0, round = 9)
verifyReputationWithDubois(type = 0, round = 10)
verifyReputationWithDubois(type = 1, round = 4)
verifyReputationWithDubois(type = 1, round = 5)
verifyTrustWithDubois(type = 1, round = 5)
verifyReputationWithDubois(type = 1, round = 6)
verifyReputationWithDubois(type = 1, round = 7)
verifyReputationWithDubois(type = 1, round = 8)
verifyReputationWithDubois(type = 1, round = 9)
verifyReputationWithDubois(type = 1, round = 10)
