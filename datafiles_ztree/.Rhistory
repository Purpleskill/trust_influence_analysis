(cur_game[i,]$PartnerDecision),
my_trust_score,
(cur_game[i,]$send_proportion),
cur_reputation,
partner_reputation
)
df_score[nrow(df_score) + 1,] <- new_row
}
}
}
}
cur_game = combine_game
for (user_id in 1:num_users) {
cur_reputation = 0.5
partner_reputation = 0.5
for (i in 1:nrow(cur_game)) {
if (cur_game[i,]$Subject == user_id) {
if (cur_game[i,]$my_send_proportional >= 0 & cur_game[i,]$Type == type) {
my_trust_score = cur_game[cur_game$Type == (1  - type) & cur_game$Partner == user_id
& cur_game$Period == cur_game[i,]$Period,]$showing_trust_score
if (cur_game[i,]$Period %% 25 > 1) {
# calculate my reputation
cur_period = cur_game[i,]$Period
cur_reputation = mean (cur_game[cur_game$Subject == user_id
& cur_game$Period < cur_period
& cur_game$my_send_proportional >= 0,]$my_send_proportional)
if (is.nan(cur_reputation)) {
cur_reputation = 0.5
}
# calculate partner reputation
partner_reputation = mean (cur_game[cur_game$Partner == user_id
& cur_game$Period < cur_period
& cur_game$my_send_proportional >= 0,]$my_send_proportional)
if (is.nan (partner_reputation)) {
partner_reputation = 0.5
}
} else {
cur_reputation = 0.5
partner_reputation = 0.5
}
new_row = c((exp_id - 1) * num_users + user_id,
(cur_game[i,]$showing_trust_score),
(cur_game[i,]$my_send_proportional),
(cur_game[i,]$Contribution),
(cur_game[i,]$response_time),
SIMPLE_GAME_ORDERS[exp_id],
(calc_peak_end_trust(cur_game[i,]$showing_trust_score)),
(cur_game[i,]$PartnerDecision),
my_trust_score,
(cur_game[i,]$send_proportion),
cur_reputation,
partner_reputation
)
df_combine[nrow(df_combine) + 1,] <- new_row
}
}
}
}
}
# Linear regression
print (paste (("Linear regression of relative sending on reputation value of Simple Game for type: "), Type_names [ type + 1]))
x_simple <- aggregate(df_simple[,c(3,2,11,8,9,12)], list(df_simple$id), mean, na.rm = TRUE)
# colnames(x_simple) <- c("grp","RelSend","my_reputation","trust_value","AbsPartnerSend","my_trust_value")
if (type == 0) {
print (summary (lm (RelSend ~ partner_reputation, data = x_simple)))
print (summary (lm (RelSend ~ trust_value, data = x_simple)))
print (summary (lm (RelSend ~ my_trust_value + trust_value, data = x_simple)))
print (summary (lm (RelSend ~ my_trust_value * trust_value, data = x_simple)))
} else {
# print (summary (lm (RelSend ~ partner_reputation + AbsPartnerSend, data = x_simple)))
# print (summary (lm (RelSend ~ trust_value + AbsPartnerSend, data = x_simple)))
print (summary (lm (RelSend ~ partner_reputation, data = x_id)))
print (summary (lm (RelSend ~ trust_value, data = x_id)))
print (summary (lm (RelSend ~ my_trust_value + trust_value + AbsPartnerSend, data = x_simple)))
print (summary (lm (RelSend ~ my_trust_value * trust_value + AbsPartnerSend, data = x_simple)))
print (summary (lm (RelSend ~ my_trust_value + trust_value * AbsPartnerSend, data = x_simple)))
}
# print ("Test the interaction")
# print (summary (lm (RelSend ~ my_trust_value + trust_value + trust_value * my_trust_value, data = x_simple)))
#
# print ("Test the interaction variable alone")
# print (summary (lm (RelSend ~ my_trust_value , data = x_simple)))
# x_simple$combine_trust <- x_simple$trust_value * x_simple$my_trust_value
# print (summary (lm (RelSend ~ combine_trust, data = x_simple)))
print (paste (("Linear regression of relative sending on reputation value of ID Game for type: "), Type_names [ type + 1]))
x_id <- aggregate(df_id[,c(3,2,11,8,9,12)], list(df_id$id), mean, na.rm = TRUE)
# colnames(x_id) <- c("grp","RelSend","my_reputation","trust_value","AbsPartnerSend","my_trust_value")
if (type == 0) {
# 26-Jun-2017: remove my_reputation value because in fact it is the RelSend in some sense
print (summary (lm (RelSend ~ partner_reputation, data = x_id)))
print (summary (lm (RelSend ~ trust_value, data = x_id)))
print (summary (lm (RelSend ~ my_trust_value + trust_value, data = x_id)))
print (summary (lm (RelSend ~ my_trust_value * trust_value, data = x_id)))
} else {
# print (summary (lm (RelSend ~ partner_reputation + AbsPartnerSend, data = x_id)))
# print (summary (lm (RelSend ~ trust_value + AbsPartnerSend, data = x_id)))
print (summary (lm (RelSend ~ partner_reputation, data = x_id)))
print (summary (lm (RelSend ~ trust_value, data = x_id)))
print (summary (lm (RelSend ~ my_trust_value + trust_value + AbsPartnerSend, data = x_id)))
print (summary (lm (RelSend ~ my_trust_value * trust_value + AbsPartnerSend, data = x_id)))
print (summary (lm (RelSend ~ my_trust_value + trust_value * AbsPartnerSend, data = x_id)))
}
# print ("Test the interaction")
# print (summary (lm (RelSend ~ my_trust_value + trust_value + trust_value * my_trust_value, data = x_id)))
#
# print ("Test the interaction variable alone")
# print (summary (lm (RelSend ~ my_trust_value , data = x_id)))
# x_id$combine_trust <- x_id$trust_value * x_id$my_trust_value
# print (summary (lm (RelSend ~ combine_trust, data = x_id)))
print (paste (("Linear regression of relative sending on reputation value of Score Game for type: "), Type_names [ type + 1]))
x_score <- aggregate(df_score[,c(3,2,11,8,9,12)], list(df_score$id), mean, na.rm = TRUE)
# colnames(x_score) <- c("grp","RelSend","my_reputation","trust_value","AbsPartnerSend","my_trust_value")
if (type == 0) {
print (summary (lm (RelSend ~ partner_reputation, data = x_score)))
print (summary (lm (RelSend ~ trust_value, data = x_score)))
print (summary (lm (RelSend ~ my_trust_value + trust_value, data = x_score)))
print (summary (lm (RelSend ~ my_trust_value * trust_value, data = x_score)))
} else {
# print (summary (lm (RelSend ~ partner_reputation + AbsPartnerSend, data = x_score)))
# print (summary (lm (RelSend ~ trust_value + AbsPartnerSend, data = x_score)))
print (summary (lm (RelSend ~ partner_reputation, data = x_score)))
print (summary (lm (RelSend ~ trust_value, data = x_score)))
print (summary (lm (RelSend ~ my_trust_value + trust_value + AbsPartnerSend, data = x_score)))
print (summary (lm (RelSend ~ my_trust_value * trust_value + AbsPartnerSend, data = x_score)))
print (summary (lm (RelSend ~ my_trust_value + trust_value * AbsPartnerSend, data = x_score)))
}
# print ("Test the interaction")
# print (summary (lm (RelSend ~ my_trust_value + trust_value + trust_value * my_trust_value, data = x_score)))
#
# print ("Test the interaction variable alone")
# print (summary (lm (RelSend ~ my_trust_value , data = x_score)))
# x_score$combine_trust <- x_score$trust_value * x_score$my_trust_value
# print (summary (lm (RelSend ~ combine_trust, data = x_score)))
print (paste (("Linear regression of relative sending on reputation value of Combine Game for type: "), Type_names [ type + 1]))
x_combine <- aggregate(df_combine[,c(3,2,11,8,9,12)], list(df_combine$id), mean, na.rm = TRUE)
# colnames(x_combine) <- c("grp","RelSend","my_reputation","trust_value","AbsPartnerSend","my_trust_value")
if (type == 0) {
print (summary (lm (RelSend ~ partner_reputation, data = x_combine)))
print (summary (lm (RelSend ~ trust_value, data = x_combine)))
print (summary (lm (RelSend ~ my_trust_value + trust_value , data = x_combine)))
print (summary (lm (RelSend ~ my_trust_value * trust_value , data = x_combine)))
} else {
# print (summary (lm (RelSend ~ partner_reputation + AbsPartnerSend, data = x_combine)))
# print (summary (lm (RelSend ~ trust_value + AbsPartnerSend, data = x_combine)))
print (summary (lm (RelSend ~ partner_reputation, data = x_combine)))
print (summary (lm (RelSend ~ trust_value, data = x_combine)))
print (summary (lm (RelSend ~ my_trust_value + trust_value + AbsPartnerSend, data = x_combine)))
print (summary (lm (RelSend ~ my_trust_value * trust_value + AbsPartnerSend, data = x_combine)))
print (summary (lm (RelSend ~ my_trust_value + trust_value * AbsPartnerSend, data = x_combine)))
}
# print ("Test the interaction")
# print (summary (lm (RelSend ~ my_trust_value + trust_value + trust_value * my_trust_value, data = x_combine)))
#
# print ("Test the interaction variable alone")
# print (summary (lm (RelSend ~ my_trust_value , data = x_combine)))
# x_combine$combine_trust <- x_combine$trust_value * x_combine$my_trust_value
# print (summary (lm (RelSend ~ combine_trust, data = x_combine)))
}
nrow (as.data.frame(all_df_receiver[1]))
nrow (as.data.frame(all_df_receiver[2]))
nrow (as.data.frame(all_df_receiver[3]))
nrow (as.data.frame(all_df_receiver[5]))
nrow (as.data.frame(all_df_receiver[4]))
nrow (as.data.frame(all_df_sender[1]))
nrow (as.data.frame(all_df_sender[2]))
nrow (as.data.frame(all_df_sender[3]))
nrow (as.data.frame(all_df_sender[4]))
type <- 0
type <- 1
df_simple <- data.frame ("id" = as.numeric(),
"trust_value" = as.numeric(),
"RelSend" = as.numeric(),
"AbsSend" = as.numeric(),
"response_time" = as.numeric(),
"game_pos" = as.numeric(),
"peak_end_trust" = as.numeric(),
"AbsPartnerSend" = as.numeric(),
"my_trust_value" = as.numeric(),
"PartnerRelSend" = as.numeric(),
"my_reputation" = as.numeric(),
"partner_reputation" = as.numeric()
)
df_id <- data.frame ("id" = as.numeric(),
"trust_value" = as.numeric(),
"RelSend" = as.numeric(),
"AbsSend" = as.numeric(),
"response_time" = as.numeric(),
"game_pos" = as.numeric(),
"peak_end_trust" = as.numeric(),
"AbsPartnerSend" = as.numeric(),
"my_trust_value" = as.numeric(),
"PartnerRelSend" = as.numeric(),
"my_reputation" = as.numeric(),
"partner_reputation" = as.numeric()
)
df_score <- data.frame ("id" = as.numeric(),
"trust_value" = as.numeric(),
"RelSend" = as.numeric(),
"AbsSend" = as.numeric(),
"response_time" = as.numeric(),
"game_pos" = as.numeric(),
"peak_end_trust" = as.numeric(),
"AbsPartnerSend" = as.numeric(),
"my_trust_value" = as.numeric(),
"PartnerRelSend" = as.numeric(),
"my_reputation" = as.numeric(),
"partner_reputation" = as.numeric()
)
df_combine <- data.frame ("id" = as.numeric(),
"trust_value" = as.numeric(),
"RelSend" = as.numeric(),
"AbsSend" = as.numeric(),
"response_time" = as.numeric(),
"game_pos" = as.numeric(),
"peak_end_trust" = as.numeric(),
"AbsPartnerSend" = as.numeric(),
"my_trust_value" = as.numeric(),
"PartnerRelSend" = as.numeric(),
"my_reputation" = as.numeric(),
"partner_reputation" = as.numeric()
)
for (exp_id in 1:num_exp) {
first_round_of_exp_subjects = (exp_id - 1) * num_rounds_per_game * num_users + 1
last_round_of_exp_subjects = exp_id * num_rounds_per_game * num_users
simple_game = simple_games[first_round_of_exp_subjects:last_round_of_exp_subjects,]
id_game = id_games [first_round_of_exp_subjects:last_round_of_exp_subjects,]
score_game = score_games [first_round_of_exp_subjects:last_round_of_exp_subjects,]
combine_game = combine_games[first_round_of_exp_subjects:last_round_of_exp_subjects,]
cur_game = simple_game
for (user_id in 1:num_users) {
cur_reputation = 0.5
partner_reputation = 0.5
for (i in 1:nrow(cur_game)) {
if (cur_game[i,]$Subject == user_id) {
if (cur_game[i,]$my_send_proportional >= 0 & cur_game[i,]$Type == type) {
my_trust_score = cur_game[cur_game$Type == (1  - type) & cur_game$Partner == user_id
& cur_game$Period == cur_game[i,]$Period,]$showing_trust_score
if (cur_game[i,]$Period %% 25 > 1) {
# calculate my reputation
cur_period = cur_game[i,]$Period
cur_reputation = mean (cur_game[cur_game$Subject == user_id
& cur_game$Period < cur_period
& cur_game$my_send_proportional >= 0,]$my_send_proportional)
if (is.nan(cur_reputation)) {
cur_reputation = 0.5
}
# calculate partner reputation
partner_reputation = mean (cur_game[cur_game$Partner == user_id
& cur_game$Period < cur_period
& cur_game$my_send_proportional >= 0,]$my_send_proportional)
if (is.nan (partner_reputation)) {
partner_reputation = 0.5
}
} else {
cur_reputation = 0.5
partner_reputation = 0.5
}
new_row = c((exp_id - 1) * num_users + user_id,
(cur_game[i,]$showing_trust_score),
(cur_game[i,]$my_send_proportional),
(cur_game[i,]$Contribution),
(cur_game[i,]$response_time),
SIMPLE_GAME_ORDERS[exp_id],
(calc_peak_end_trust(cur_game[i,]$showing_trust_score)),
(cur_game[i,]$PartnerDecision),
my_trust_score,
(cur_game[i,]$send_proportion),
cur_reputation,
partner_reputation
)
df_simple[nrow(df_simple) + 1,] <- new_row
}
}
}
}
cur_game = id_game
for (user_id in 1:num_users) {
cur_reputation = 0.5
partner_reputation = 0.5
for (i in 1:nrow(cur_game)) {
if (cur_game[i,]$Subject == user_id) {
if (cur_game[i,]$my_send_proportional >= 0 & cur_game[i,]$Type == type) {
my_trust_score = cur_game[cur_game$Type == (1  - type) & cur_game$Partner == user_id
& cur_game$Period == cur_game[i,]$Period,]$showing_trust_score
if (cur_game[i,]$Period %% 25 > 1) {
# calculate my reputation
cur_period = cur_game[i,]$Period
cur_reputation = mean (cur_game[cur_game$Subject == user_id
& cur_game$Period < cur_period
& cur_game$my_send_proportional >= 0,]$my_send_proportional)
if (is.nan(cur_reputation)) {
cur_reputation = 0.5
}
# calculate partner reputation
partner_reputation = mean (cur_game[cur_game$Partner == user_id
& cur_game$Period < cur_period
& cur_game$my_send_proportional >= 0,]$my_send_proportional)
if (is.nan (partner_reputation)) {
partner_reputation = 0.5
}
} else {
cur_reputation = 0.5
partner_reputation = 0.5
}
new_row = c((exp_id - 1) * num_users + user_id,
(cur_game[i,]$showing_trust_score),
(cur_game[i,]$my_send_proportional),
(cur_game[i,]$Contribution),
(cur_game[i,]$response_time),
SIMPLE_GAME_ORDERS[exp_id],
(calc_peak_end_trust(cur_game[i,]$showing_trust_score)),
(cur_game[i,]$PartnerDecision),
my_trust_score,
(cur_game[i,]$send_proportion),
cur_reputation,
partner_reputation
)
df_id[nrow(df_id) + 1,] <- new_row
}
}
}
}
cur_game = score_game
for (user_id in 1:num_users) {
cur_reputation = 0.5
partner_reputation = 0.5
for (i in 1:nrow(cur_game)) {
if (cur_game[i,]$Subject == user_id) {
if (cur_game[i,]$my_send_proportional >= 0 & cur_game[i,]$Type == type) {
my_trust_score = cur_game[cur_game$Type == (1  - type) & cur_game$Partner == user_id
& cur_game$Period == cur_game[i,]$Period,]$showing_trust_score
if (cur_game[i,]$Period %% 25 > 1) {
# calculate my reputation
cur_period = cur_game[i,]$Period
cur_reputation = mean (cur_game[cur_game$Subject == user_id
& cur_game$Period < cur_period
& cur_game$my_send_proportional >= 0,]$my_send_proportional)
if (is.nan(cur_reputation)) {
cur_reputation = 0.5
}
# calculate partner reputation
partner_reputation = mean (cur_game[cur_game$Partner == user_id
& cur_game$Period < cur_period
& cur_game$my_send_proportional >= 0,]$my_send_proportional)
if (is.nan (partner_reputation)) {
partner_reputation = 0.5
}
} else {
cur_reputation = 0.5
partner_reputation = 0.5
}
new_row = c((exp_id - 1) * num_users + user_id,
(cur_game[i,]$showing_trust_score),
(cur_game[i,]$my_send_proportional),
(cur_game[i,]$Contribution),
(cur_game[i,]$response_time),
SIMPLE_GAME_ORDERS[exp_id],
(calc_peak_end_trust(cur_game[i,]$showing_trust_score)),
(cur_game[i,]$PartnerDecision),
my_trust_score,
(cur_game[i,]$send_proportion),
cur_reputation,
partner_reputation
)
df_score[nrow(df_score) + 1,] <- new_row
}
}
}
}
cur_game = combine_game
for (user_id in 1:num_users) {
cur_reputation = 0.5
partner_reputation = 0.5
for (i in 1:nrow(cur_game)) {
if (cur_game[i,]$Subject == user_id) {
if (cur_game[i,]$my_send_proportional >= 0 & cur_game[i,]$Type == type) {
my_trust_score = cur_game[cur_game$Type == (1  - type) & cur_game$Partner == user_id
& cur_game$Period == cur_game[i,]$Period,]$showing_trust_score
if (cur_game[i,]$Period %% 25 > 1) {
# calculate my reputation
cur_period = cur_game[i,]$Period
cur_reputation = mean (cur_game[cur_game$Subject == user_id
& cur_game$Period < cur_period
& cur_game$my_send_proportional >= 0,]$my_send_proportional)
if (is.nan(cur_reputation)) {
cur_reputation = 0.5
}
# calculate partner reputation
partner_reputation = mean (cur_game[cur_game$Partner == user_id
& cur_game$Period < cur_period
& cur_game$my_send_proportional >= 0,]$my_send_proportional)
if (is.nan (partner_reputation)) {
partner_reputation = 0.5
}
} else {
cur_reputation = 0.5
partner_reputation = 0.5
}
new_row = c((exp_id - 1) * num_users + user_id,
(cur_game[i,]$showing_trust_score),
(cur_game[i,]$my_send_proportional),
(cur_game[i,]$Contribution),
(cur_game[i,]$response_time),
SIMPLE_GAME_ORDERS[exp_id],
(calc_peak_end_trust(cur_game[i,]$showing_trust_score)),
(cur_game[i,]$PartnerDecision),
my_trust_score,
(cur_game[i,]$send_proportion),
cur_reputation,
partner_reputation
)
df_combine[nrow(df_combine) + 1,] <- new_row
}
}
}
}
}
# Linear regression
print (paste (("Linear regression of relative sending on reputation value of Simple Game for type: "), Type_names [ type + 1]))
x_simple <- aggregate(df_simple[,c(3,2,11,8,9,12)], list(df_simple$id), mean, na.rm = TRUE)
# colnames(x_simple) <- c("grp","RelSend","my_reputation","trust_value","AbsPartnerSend","my_trust_value")
if (type == 0) {
print (summary (lm (RelSend ~ partner_reputation, data = x_simple)))
print (summary (lm (RelSend ~ trust_value, data = x_simple)))
print (summary (lm (RelSend ~ my_trust_value + trust_value, data = x_simple)))
print (summary (lm (RelSend ~ my_trust_value * trust_value, data = x_simple)))
} else {
print (summary (lm (RelSend ~ partner_reputation + AbsPartnerSend, data = x_simple)))
# print (summary (lm (RelSend ~ trust_value + AbsPartnerSend, data = x_simple)))
print (summary (lm (RelSend ~ partner_reputation, data = x_id)))
print (summary (lm (RelSend ~ trust_value, data = x_id)))
print (summary (lm (RelSend ~ my_trust_value + trust_value + AbsPartnerSend, data = x_simple)))
print (summary (lm (RelSend ~ my_trust_value * trust_value + AbsPartnerSend, data = x_simple)))
print (summary (lm (RelSend ~ my_trust_value + trust_value * AbsPartnerSend, data = x_simple)))
}
# print ("Test the interaction")
# print (summary (lm (RelSend ~ my_trust_value + trust_value + trust_value * my_trust_value, data = x_simple)))
#
# print ("Test the interaction variable alone")
# print (summary (lm (RelSend ~ my_trust_value , data = x_simple)))
# x_simple$combine_trust <- x_simple$trust_value * x_simple$my_trust_value
# print (summary (lm (RelSend ~ combine_trust, data = x_simple)))
print (paste (("Linear regression of relative sending on reputation value of ID Game for type: "), Type_names [ type + 1]))
x_id <- aggregate(df_id[,c(3,2,11,8,9,12)], list(df_id$id), mean, na.rm = TRUE)
# colnames(x_id) <- c("grp","RelSend","my_reputation","trust_value","AbsPartnerSend","my_trust_value")
if (type == 0) {
# 26-Jun-2017: remove my_reputation value because in fact it is the RelSend in some sense
print (summary (lm (RelSend ~ partner_reputation, data = x_id)))
print (summary (lm (RelSend ~ trust_value, data = x_id)))
print (summary (lm (RelSend ~ my_trust_value + trust_value, data = x_id)))
print (summary (lm (RelSend ~ my_trust_value * trust_value, data = x_id)))
} else {
print (summary (lm (RelSend ~ partner_reputation + AbsPartnerSend, data = x_id)))
# print (summary (lm (RelSend ~ trust_value + AbsPartnerSend, data = x_id)))
print (summary (lm (RelSend ~ partner_reputation, data = x_id)))
print (summary (lm (RelSend ~ trust_value, data = x_id)))
print (summary (lm (RelSend ~ my_trust_value + trust_value + AbsPartnerSend, data = x_id)))
print (summary (lm (RelSend ~ my_trust_value * trust_value + AbsPartnerSend, data = x_id)))
print (summary (lm (RelSend ~ my_trust_value + trust_value * AbsPartnerSend, data = x_id)))
}
# print ("Test the interaction")
# print (summary (lm (RelSend ~ my_trust_value + trust_value + trust_value * my_trust_value, data = x_id)))
#
# print ("Test the interaction variable alone")
# print (summary (lm (RelSend ~ my_trust_value , data = x_id)))
# x_id$combine_trust <- x_id$trust_value * x_id$my_trust_value
# print (summary (lm (RelSend ~ combine_trust, data = x_id)))
print (paste (("Linear regression of relative sending on reputation value of Score Game for type: "), Type_names [ type + 1]))
x_score <- aggregate(df_score[,c(3,2,11,8,9,12)], list(df_score$id), mean, na.rm = TRUE)
# colnames(x_score) <- c("grp","RelSend","my_reputation","trust_value","AbsPartnerSend","my_trust_value")
if (type == 0) {
print (summary (lm (RelSend ~ partner_reputation, data = x_score)))
print (summary (lm (RelSend ~ trust_value, data = x_score)))
print (summary (lm (RelSend ~ my_trust_value + trust_value, data = x_score)))
print (summary (lm (RelSend ~ my_trust_value * trust_value, data = x_score)))
} else {
print (summary (lm (RelSend ~ partner_reputation + AbsPartnerSend, data = x_score)))
# print (summary (lm (RelSend ~ trust_value + AbsPartnerSend, data = x_score)))
print (summary (lm (RelSend ~ partner_reputation, data = x_score)))
print (summary (lm (RelSend ~ trust_value, data = x_score)))
print (summary (lm (RelSend ~ my_trust_value + trust_value + AbsPartnerSend, data = x_score)))
print (summary (lm (RelSend ~ my_trust_value * trust_value + AbsPartnerSend, data = x_score)))
print (summary (lm (RelSend ~ my_trust_value + trust_value * AbsPartnerSend, data = x_score)))
}
# print ("Test the interaction")
# print (summary (lm (RelSend ~ my_trust_value + trust_value + trust_value * my_trust_value, data = x_score)))
#
# print ("Test the interaction variable alone")
# print (summary (lm (RelSend ~ my_trust_value , data = x_score)))
# x_score$combine_trust <- x_score$trust_value * x_score$my_trust_value
# print (summary (lm (RelSend ~ combine_trust, data = x_score)))
print (paste (("Linear regression of relative sending on reputation value of Combine Game for type: "), Type_names [ type + 1]))
x_combine <- aggregate(df_combine[,c(3,2,11,8,9,12)], list(df_combine$id), mean, na.rm = TRUE)
# colnames(x_combine) <- c("grp","RelSend","my_reputation","trust_value","AbsPartnerSend","my_trust_value")
if (type == 0) {
print (summary (lm (RelSend ~ partner_reputation, data = x_combine)))
print (summary (lm (RelSend ~ trust_value, data = x_combine)))
print (summary (lm (RelSend ~ my_trust_value + trust_value , data = x_combine)))
print (summary (lm (RelSend ~ my_trust_value * trust_value , data = x_combine)))
} else {
print (summary (lm (RelSend ~ partner_reputation + AbsPartnerSend, data = x_combine)))
# print (summary (lm (RelSend ~ trust_value + AbsPartnerSend, data = x_combine)))
print (summary (lm (RelSend ~ partner_reputation, data = x_combine)))
print (summary (lm (RelSend ~ trust_value, data = x_combine)))
print (summary (lm (RelSend ~ my_trust_value + trust_value + AbsPartnerSend, data = x_combine)))
print (summary (lm (RelSend ~ my_trust_value * trust_value + AbsPartnerSend, data = x_combine)))
print (summary (lm (RelSend ~ my_trust_value + trust_value * AbsPartnerSend, data = x_combine)))
}
print (summary (lm (RelSend ~ trust_value + AbsPartnerSend, data = x_simple)))
print (summary (lm (RelSend ~ trust_value + AbsPartnerSend, data = x_id)))
print (summary (lm (RelSend ~ trust_value + AbsPartnerSend, data = x_score)))
print (summary (lm (RelSend ~ trust_value + AbsPartnerSend, data = x_combine)))
