f2 = c(log (x1/1000 + 1)/2.014 + 0.161, rep(0.65, length(x)-length(x1))) + runif (length(x), max=0.02,min=-0.05)
plot (f2 ~ x, type = "l", col = "red", ylim=c(0,1))
f2 = c(log (x1/1000 + 1)/2.014 + 0.161, rep(0.65, length(x)-length(x1))) + runif (length(x), max=0.02,min=-0.075)
plot (f2 ~ x, type = "l", col = "red", ylim=c(0,1))
f2 = c(log (x1/1000 + 1)/2.014 + 0.161, rep(0.65, length(x)-length(x1))) + runif (length(x), max=0.08,min=-0.175)
plot (f2 ~ x, type = "l", col = "red", ylim=c(0,1))
f2 = c(log (x1/1000 + 1)/2.014 + 0.161, rep(0.65, length(x)-length(x1))) + runif (length(x), max=0.05,min=-0.1)
plot (f2 ~ x, type = "l", col = "red", ylim=c(0,1))
plot (f2 ~ x, type = "l", col = "red", ylim=c(0,1), panel.first = grid())
plot (f2 ~ x, type = "l", col = "red", ylim=c(0,1), panel.first = grid(), xlab="Training steps", ylab="Accuracy")
f3 = c(log (x1/1000 + 1)/1.874 + 0.1736, rep(0.68, length(x)-length(x1))) + runif (length(x), max=0.05,min=-0.03)
plot (f3~x,add =TRUE, col = "blue")
plot (f3~x,add =TRUE, col = "blue", type = "l")
f3 = c(log (x1/1000 + 1)/1.874 + 0.1736, rep(0.72, length(x)-length(x1))) + runif (length(x), max=0.05,min=-0.03)
f3 = c(log (x1/1000 + 1)/1.874 + 0.1736, rep(0.72, length(x)-length(x1))) + runif (length(x), max=0.05,min=-0.03)
plot (f3~x,add =TRUE, col = "blue", type = "l")
plot (f2 ~ x, type = "l", col = "red", ylim=c(0,1), panel.first = grid(), xlab="Training steps", ylab="Accuracy")
lines(f3, add=TRUE)
lines(f3~x, add=TRUE)
plot (f2 ~ x, type = "l", col = "red", ylim=c(0,1), panel.first = grid(), xlab="Training steps", ylab="Accuracy")
lines(f3~x, add=TRUE)
install.packages("h2o")
df = read.csv("https://goo.gl/uWbihf", sep = ";")
str(df)
df = read.csv("https://goo.gl/uWbihf", sep = ";", header = FALSE)
str(df)
library (h2o)
h2o.shutdown ()
?h2o.gbm
library(h2o)
?h2o.gbm
?h2o.grid
library(h2o)
devtools::install_github("rstudio/tensorflow")
library (tensorflow)
library(reticulate)
use_condaenv("tensorflow")
library(tensorflow)
sess = tf$Session()
hello <- tf$constant('Hello, TensorFlow!')
sess$run(hello)
library(tensorflow)
# Create 100 phony x, y data points, y = x * 0.1 + 0.3
x_data <- runif(100, min=0, max=1)
y_data <- x_data * 0.1 + 0.3
# Try to find values for W and b that compute y_data = W * x_data + b
# (We know that W should be 0.1 and b 0.3, but TensorFlow will
# figure that out for us.)
W <- tf$Variable(tf$random_uniform(shape(1L), -1.0, 1.0))
b <- tf$Variable(tf$zeros(shape(1L)))
y <- W * x_data + b
# Minimize the mean squared errors.
loss <- tf$reduce_mean((y - y_data) ^ 2)
optimizer <- tf$train$GradientDescentOptimizer(0.5)
train <- optimizer$minimize(loss)
# Launch the graph and initialize the variables.
sess = tf$Session()
sess$run(tf$global_variables_initializer())
# Fit the line (Learns best fit is W: 0.1, b: 0.3)
for (step in 1:201) {
sess$run(train)
if (step %% 20 == 0)
cat(step, "-", sess$run(W), sess$run(b), "\n")
}
tf.__version__
tf$VERSION
tf$Print(train)
library(oce)
install.packages("oce")
library(oce)
## Example 1. color scheme for points on xy plot
x <- seq(0, 1, length.out = 40)
y <- sin(2 * pi * x)
par(mar = c(3, 3, 1, 1))
mar <- par("mar")  # prevent margin creep by drawPalette()
## First, default breaks
c <- Colormap(y)
drawPalette(c$zlim, col = c$col, breaks = c$breaks)
plot(x, y, bg = c$zcol, pch = 21, cex = 1)
grid()
## Example 1. color scheme for points on xy plot
x <- seq(0, 1, length.out = 40)
y <- sin(2 * pi * x)
par(mar = c(3, 3, 1, 1))
mar <- par("mar")  # prevent margin creep by drawPalette()
## First, default breaks
c <- colormap(y)
drawPalette(c$zlim, col = c$col, breaks = c$breaks)
plot(x, y, bg = c$zcol, pch = 21, cex = 1)
grid()
par(mar = mar)
## Second, 100 breaks, yielding a smoother palette
c <- Colormap(y, breaks = 100)
drawPalette(c$zlim, col = c$col, breaks = c$breaks)
plot(x, y, bg = c$zcol, pch = 21, cex = 1)
grid()
par(mar = mar)
## Second, 100 breaks, yielding a smoother palette
c <- colormap(y, breaks = 100)
drawPalette(c$zlim, col = c$col, breaks = c$breaks)
plot(x, y, bg = c$zcol, pch = 21, cex = 1)
grid()
c
plot(x, y, bg = c$zcol, pch = 21, cex = 1)
grid()
drawPalette(c$zlim, col = c$col, breaks = c$breaks)
y
y = 1:10
c <- colormap(y)
drawPalette(c$zlim, col = c$col, breaks = c$breaks)
dev.off()
drawPalette(c$zlim, col = c$col, breaks = c$breaks)
c
?colormap
y <- c(370,
380,
400,
418,
425,
430,
433,
438,
455,
465,
470,
493,
522)
c <- colormap (y)
drawPalette(c$zlim, col = c$col, breaks = c$breaks)
dev.off
dev.off()
drawPalette(c$zlim, col = c$col, breaks = c$breaks)
dev.off()
c <- colormap (y, breaks = 10)
drawPalette(c$zlim, col = c$col, breaks = c$breaks)
c <- colormap (y, breaks = 1)
dev.off()
drawPalette(c$zlim, col = c$col, breaks = c$breaks)
c <- colormap(y)
dev.off()
drawPalette(c$zlim, col = c$col, breaks = c$breaks)
max(y)
c
cm <- colormap(name = "gmt_globe")
deep <- cm$x0 < -4000
cm$col0[deep] <- "black"
cm$col1[deep] <- "black"
cm <- Colormap(x0 = cm$x0, x1 = cm$x1, col0 = cm$col0, col1 = cm$col1)
imagep(topoWorld, breaks = cm$breaks, col = cm$col)
cm <- colormap(name = "gmt_globe")
deep <- cm$x0 < -4000
cm$col0[deep] <- "black"
cm$col1[deep] <- "black"
cm <- colormap(x0 = cm$x0, x1 = cm$x1, col0 = cm$col0, col1 = cm$col1)
imagep(topoWorld, breaks = cm$breaks, col = cm$col)
Rozaro_revenue <- 0.23
Erumac_revenue <- 0.18
len_revenue <- 0.3
total_pop <- 500 * 1e6
total_conn <- 400 * 1e6
total_conn * Rozaro_revenue
two_services <- c(0.45,0.7,0.8)
voice <- c(60,40,5)
data <- c(40,35,2)
voice * (1 - two_services) + data * (1 - two_services)
sum (THVL | Ban nhạc quyền năng - Tập 7)
sum (voice * (1 - two_services) + data * (1 - two_services)
)
sum (voice  + data * (1 - two_services))
sum (voice * (1 - two_services) + data)
devtools::install_github("rstudio/keras")
library (keras)
install_tensorflow(gpu = TRUE)
setwd("~/workspace/trust_influence_analysis/datafiles_ztree")
source ("ProcessData.R")
zTT <- readMultiXLS ("./all_data")
SBJs <- processMultiSBJ ("./all_data")
# Create my sending proportional
zTT[2]$subjects$my_send_proportional <- ifelse(zTT[2]$subjects$Type == 0, zTT[2]$subjects$Contribution/10, ifelse(zTT[2]$subjects$PartnerDecision > 0, zTT[2]$subjects$Contribution/3/zTT[2]$subjects$PartnerDecision, -1))
zTT[2]$subjects$CurrGameProfit <- ifelse(zTT[2]$subjects$Type == 0, zTT[2]$subjects$PartnerDecision - zTT[2]$subjects$Contribution, zTT[2]$subjects$PartnerDecision*3 - zTT[2]$subjects$Contribution)
# Numbers of user of a group
num_users = 6
# Number of rounds each user play to each other
average_rounds = 5
# Number of games for each group
num_games = 4
# Number of rounds for each game (should be 25)
num_rounds_per_game = (num_users - 1) * average_rounds
# Number of rounds for each experiment (should be 100, because we have 4 games)
num_rounds_per_exp = num_rounds_per_game * num_games
# Number of experiments (it is 5 at the time of writing,
# but can be increased if we organize more experiments)
num_exp = nrow (zTT[1]$globals) / num_rounds_per_exp
Type_names = c("SENDER", "RECEIVER")
SIMPLE_GAME_ORDERS =      c(3,2,4,1,2)
ID_GAME_ORDERS =          c(1,4,1,2,3)
SCORE_GAME_ORDERS =       c(2,1,3,4,4)
COMBINE_GAME_ORDERS =     c(4,3,2,3,1)
GAME_NAMES <- c("Simple GAME", "ID GAME", "Score GAME", "Combine GAME")
simple_games <- zTT[2]$subjects[0,]
id_games <- zTT[2]$subjects[0,]
score_games <- zTT[2]$subjects[0,]
combine_games <- zTT[2]$subjects[0,]
for (exp_id in 1:num_exp) {
first_round_of_exp_globals = (exp_id - 1) * num_rounds_per_exp + 1
last_round_of_exp_globals = exp_id * num_rounds_per_exp
globals_of_exp = zTT[1]$globals[first_round_of_exp_globals:last_round_of_exp_globals,]
first_round_of_exp_subjects = (exp_id - 1) * num_rounds_per_exp * num_users + 1
last_round_of_exp_subjects = exp_id * num_rounds_per_exp * num_users
subjects_of_exp = zTT[2]$subjects[first_round_of_exp_subjects:last_round_of_exp_subjects,]
SIMPLE_GAME_ORDER = globals_of_exp[1,]$SIMPLE_GAME
ID_GAME_ORDER = globals_of_exp[1,]$ID_GAME
SCORE_GAME_ORDER = globals_of_exp[1,]$SCORE_GAME
COMBINE_GAME_ORDER = globals_of_exp[1,]$COMBINE_GAME
simple_games <- rbind(simple_games, subjects_of_exp[((SIMPLE_GAME_ORDER - 1) *
num_rounds_per_game * num_users + 1):
(SIMPLE_GAME_ORDER * num_rounds_per_game * num_users),])
id_games <- rbind(id_games, subjects_of_exp[((ID_GAME_ORDER - 1) *
num_rounds_per_game * num_users + 1):
(ID_GAME_ORDER * num_rounds_per_game * num_users),])
score_games <- rbind(score_games, subjects_of_exp[((SCORE_GAME_ORDER - 1) *
num_rounds_per_game * num_users + 1):
(SCORE_GAME_ORDER * num_rounds_per_game * num_users),])
combine_games <- rbind(combine_games, subjects_of_exp[((COMBINE_GAME_ORDER - 1) *
num_rounds_per_game * num_users + 1):
(COMBINE_GAME_ORDER * num_rounds_per_game * num_users),])
}
type <- 0
require(car)
# AbsSend: absolute sending
# RelSend: send proportion of maximum
# Profit: profit get at this round
# game_pos:  order of game to play in this experiment
df <- data.frame("id" = as.numeric(),
"GroupID"= as.numeric(),
"SHOW_TRUST"=as.numeric(),
"SHOW_ID"=as.numeric(),
"AbsSend" = as.numeric(),
"RelSend" = as.numeric(),
"Profit" = as.numeric(),
"game_pos" = as.numeric(),
"response_time" = as.numeric())
for (j in 1:num_users) {
for (exp_id in 1:num_exp) {
# if (exp_id == 3) {next()}
for (k in 1:num_games) {
first_round_of_exp_subjects = (exp_id - 1) * num_rounds_per_game * num_users + 1
last_round_of_exp_subjects = exp_id * num_rounds_per_game * num_users
simple_game = simple_games[first_round_of_exp_subjects:last_round_of_exp_subjects,]
id_game = id_games [first_round_of_exp_subjects:last_round_of_exp_subjects,]
score_game = score_games [first_round_of_exp_subjects:last_round_of_exp_subjects,]
combine_game = combine_games[first_round_of_exp_subjects:last_round_of_exp_subjects,]
user_id = j + num_users * (exp_id - 1)
if (k == 1) {
if (exp_id == 3) {
new_row = c(as.numeric (user_id),
as.numeric (exp_id),
0,
0,
sum (simple_game[simple_game$Subject == j & simple_game$Type == type,]$Contribution),
mean (simple_game[simple_game$Subject == j & simple_game$Type == type & simple_game$my_send_proportional >= 0,]$my_send_proportional),
sum (simple_game[simple_game$Subject == j & simple_game$Type == type,]$CurrGameProfit),
SIMPLE_GAME_ORDERS[exp_id],
mean (simple_game[simple_game$Subject == j & simple_game$Type == type,]$response_time)
)
df[nrow(df)+1,] <- new_row
}
}
if (k == 2) {
if (exp_id == 2) {
new_row = c(user_id,
exp_id,
0,
1,
sum (id_game[id_game$Subject == j & id_game$Type == type,]$Contribution),
mean (id_game[id_game$Subject == j & id_game$Type == type & id_game$my_send_proportional >= 0,]$my_send_proportional),
sum (id_game[id_game$Subject == j & id_game$Type == type,]$CurrGameProfit),
ID_GAME_ORDERS[exp_id],
mean (id_game[id_game$Subject == j & id_game$Type == type,]$response_time)
)
df[nrow(df)+1,] <- new_row
}
}
if (k == 3) {
if (exp_id == 4 | exp_id == 5) {
new_row = c(user_id,
exp_id,
1,
0,
sum (score_game[score_game$Subject == j & score_game$Type == type,]$Contribution),
mean (score_game[score_game$Subject == j & score_game$Type == type & score_game$my_send_proportional >= 0,]$my_send_proportional),
sum (score_game[score_game$Subject == j & score_game$Type == type,]$CurrGameProfit),
SCORE_GAME_ORDERS[exp_id],
mean (score_game[score_game$Subject == j & score_game$Type == type,]$response_time)
)
df[nrow(df)+1,] <- new_row
}
}
if (k == 4) {
if (exp_id == 1) {
new_row = c(user_id,
exp_id,
1,
1,
sum (combine_game[combine_game$Subject == j & combine_game$Type == type,]$Contribution),
mean (combine_game[combine_game$Subject == j & combine_game$Type == type & combine_game$my_send_proportional >= 0,]$my_send_proportional),
sum (combine_game[combine_game$Subject == j & combine_game$Type == type,]$CurrGameProfit),
COMBINE_GAME_ORDERS[exp_id],
mean (combine_game[combine_game$Subject == j & combine_game$Type == type,]$response_time)
)
df[nrow(df)+1,] <- new_row
}
}
}
}
}
df$id <- as.factor(df$id)
df$GroupID <- as.factor(df$GroupID)
df$SHOW_TRUST <- as.factor (df$SHOW_TRUST)
df$SHOW_ID <- as.factor(df$SHOW_ID)
df$game_pos <- as.factor(df$game_pos)
df$game_setting <- as.factor (((as.numeric (df$SHOW_TRUST) - 1) * 2 + (as.numeric (df$SHOW_ID) - 1) + 1))
df$game_pos <- NULL
# df$game_pos <-df$game_setting
# df$game_setting <- NULl
print ("ANOVA analysis with sending proportion on GroupID:game_setting.")
print (paste("Type: ", Type_names[type+1]))
df$score <- df$RelSend
print (summmary (aov(score ~ GroupID*game_setting + Error (id/game_setting), data = df)))
print  (aov(score ~ GroupID*game_setting + Error (id/game_setting), data = df))
str(df)
df <- data.frame("id" = as.numeric(),
"GroupID"= as.numeric(),
"SHOW_TRUST"=as.numeric(),
"SHOW_ID"=as.numeric(),
"AbsSend" = as.numeric(),
"RelSend" = as.numeric(),
"Profit" = as.numeric(),
"game_pos" = as.numeric(),
"response_time" = as.numeric())
for (j in 1:num_users) {
for (exp_id in 1:num_exp) {
# if (exp_id == 3) {next()}
for (k in 1:num_games) {
first_round_of_exp_subjects = (exp_id - 1) * num_rounds_per_game * num_users + 1
last_round_of_exp_subjects = exp_id * num_rounds_per_game * num_users
simple_game = simple_games[first_round_of_exp_subjects:last_round_of_exp_subjects,]
id_game = id_games [first_round_of_exp_subjects:last_round_of_exp_subjects,]
score_game = score_games [first_round_of_exp_subjects:last_round_of_exp_subjects,]
combine_game = combine_games[first_round_of_exp_subjects:last_round_of_exp_subjects,]
user_id = j + num_users * (exp_id - 1)
if (k == 1) {
if (exp_id == 3) {
new_row = c(as.numeric (user_id),
as.numeric (exp_id),
0,
0,
sum (simple_game[simple_game$Subject == j & simple_game$Type == type,]$Contribution),
mean (simple_game[simple_game$Subject == j & simple_game$Type == type & simple_game$my_send_proportional >= 0,]$my_send_proportional),
sum (simple_game[simple_game$Subject == j & simple_game$Type == type,]$CurrGameProfit),
SIMPLE_GAME_ORDERS[exp_id],
mean (simple_game[simple_game$Subject == j & simple_game$Type == type,]$response_time)
)
df[nrow(df)+1,] <- new_row
}
}
if (k == 2) {
if (exp_id == 2) {
new_row = c(user_id,
exp_id,
0,
1,
sum (id_game[id_game$Subject == j & id_game$Type == type,]$Contribution),
mean (id_game[id_game$Subject == j & id_game$Type == type & id_game$my_send_proportional >= 0,]$my_send_proportional),
sum (id_game[id_game$Subject == j & id_game$Type == type,]$CurrGameProfit),
ID_GAME_ORDERS[exp_id],
mean (id_game[id_game$Subject == j & id_game$Type == type,]$response_time)
)
df[nrow(df)+1,] <- new_row
}
}
if (k == 3) {
if (exp_id == 4 | exp_id == 5) {
new_row = c(user_id,
exp_id,
1,
0,
sum (score_game[score_game$Subject == j & score_game$Type == type,]$Contribution),
mean (score_game[score_game$Subject == j & score_game$Type == type & score_game$my_send_proportional >= 0,]$my_send_proportional),
sum (score_game[score_game$Subject == j & score_game$Type == type,]$CurrGameProfit),
SCORE_GAME_ORDERS[exp_id],
mean (score_game[score_game$Subject == j & score_game$Type == type,]$response_time)
)
df[nrow(df)+1,] <- new_row
}
}
if (k == 4) {
if (exp_id == 1) {
new_row = c(user_id,
exp_id,
1,
1,
sum (combine_game[combine_game$Subject == j & combine_game$Type == type,]$Contribution),
mean (combine_game[combine_game$Subject == j & combine_game$Type == type & combine_game$my_send_proportional >= 0,]$my_send_proportional),
sum (combine_game[combine_game$Subject == j & combine_game$Type == type,]$CurrGameProfit),
COMBINE_GAME_ORDERS[exp_id],
mean (combine_game[combine_game$Subject == j & combine_game$Type == type,]$response_time)
)
df[nrow(df)+1,] <- new_row
}
}
}
}
}
str(df)
str(df$id)
summary(df$id)
num_games
df <- data.frame("id" = as.numeric(),
"GroupID"= as.numeric(),
"SHOW_TRUST"=as.numeric(),
"SHOW_ID"=as.numeric(),
"AbsSend" = as.numeric(),
"RelSend" = as.numeric(),
"Profit" = as.numeric(),
"game_pos" = as.numeric(),
"response_time" = as.numeric())
for (j in 1:num_users) {
for (exp_id in 1:num_exp) {
# if (exp_id == 3) {next()}
for (k in 1:num_games) {
first_round_of_exp_subjects = (exp_id - 1) * num_rounds_per_game * num_users + 1
last_round_of_exp_subjects = exp_id * num_rounds_per_game * num_users
simple_game = simple_games[first_round_of_exp_subjects:last_round_of_exp_subjects,]
id_game = id_games [first_round_of_exp_subjects:last_round_of_exp_subjects,]
score_game = score_games [first_round_of_exp_subjects:last_round_of_exp_subjects,]
combine_game = combine_games[first_round_of_exp_subjects:last_round_of_exp_subjects,]
user_id = j + num_users * (exp_id - 1)
if (k == 1) {
new_row = c(as.numeric (user_id),
as.numeric (exp_id),
0,
0,
sum (simple_game[simple_game$Subject == j & simple_game$Type == type,]$Contribution),
mean (simple_game[simple_game$Subject == j & simple_game$Type == type & simple_game$my_send_proportional >= 0,]$my_send_proportional),
sum (simple_game[simple_game$Subject == j & simple_game$Type == type,]$CurrGameProfit),
SIMPLE_GAME_ORDERS[exp_id],
mean (simple_game[simple_game$Subject == j & simple_game$Type == type,]$response_time)
)
df[nrow(df)+1,] <- new_row
}
if (k == 2) {
new_row = c(user_id,
exp_id,
0,
1,
sum (id_game[id_game$Subject == j & id_game$Type == type,]$Contribution),
mean (id_game[id_game$Subject == j & id_game$Type == type & id_game$my_send_proportional >= 0,]$my_send_proportional),
sum (id_game[id_game$Subject == j & id_game$Type == type,]$CurrGameProfit),
ID_GAME_ORDERS[exp_id],
mean (id_game[id_game$Subject == j & id_game$Type == type,]$response_time)
)
df[nrow(df)+1,] <- new_row
}
if (k == 3) {
new_row = c(user_id,
exp_id,
1,
0,
sum (score_game[score_game$Subject == j & score_game$Type == type,]$Contribution),
mean (score_game[score_game$Subject == j & score_game$Type == type & score_game$my_send_proportional >= 0,]$my_send_proportional),
sum (score_game[score_game$Subject == j & score_game$Type == type,]$CurrGameProfit),
SCORE_GAME_ORDERS[exp_id],
mean (score_game[score_game$Subject == j & score_game$Type == type,]$response_time)
)
df[nrow(df)+1,] <- new_row
}
if (k == 4) {
new_row = c(user_id,
exp_id,
1,
1,
sum (combine_game[combine_game$Subject == j & combine_game$Type == type,]$Contribution),
mean (combine_game[combine_game$Subject == j & combine_game$Type == type & combine_game$my_send_proportional >= 0,]$my_send_proportional),
sum (combine_game[combine_game$Subject == j & combine_game$Type == type,]$CurrGameProfit),
COMBINE_GAME_ORDERS[exp_id],
mean (combine_game[combine_game$Subject == j & combine_game$Type == type,]$response_time)
)
df[nrow(df)+1,] <- new_row
}
}
}
}
df$id <- as.factor(df$id)
df$GroupID <- as.factor(df$GroupID)
df$SHOW_TRUST <- as.factor (df$SHOW_TRUST)
df$SHOW_ID <- as.factor(df$SHOW_ID)
df$game_pos <- as.factor(df$game_pos)
df$game_setting <- as.factor (((as.numeric (df$SHOW_TRUST) - 1) * 2 + (as.numeric (df$SHOW_ID) - 1) + 1))
df$game_pos <- NULL
# df$game_pos <-df$game_setting
# df$game_setting <- NULl
print ("ANOVA analysis with sending proportion on GroupID:game_setting.")
print (paste("Type: ", Type_names[type+1]))
df$score <- df$RelSend
print  (aov(score ~ GroupID*game_setting + Error (id/game_setting), data = df))
print  (aov(score ~ game_setting + Error (id/game_setting), data = df))
anova_analysis(df, type = type, num_way = 2)
df$game_pos <- NULL
df$game_pos <-df$game_setting
df$game_setting <- NULl
anova_analysis(df, type = type, num_way = 2)
