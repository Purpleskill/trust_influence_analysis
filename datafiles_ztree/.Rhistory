# scan history to find the best memory
best_payoff <- 0
best_payoff_index <- 1
for (j in 1:nrow(cur_df)) {
# print (paste ("Processing row",j))
if (cur_id == cur_df[j,]$id) {
if (cur_period > cur_df[j,]$period) {
r <- runif (1, min = 0, max = 1)
if (r <= p_recall) {
# recall this experience cur_df[j,]
cur_payoff <- cur_df$AbsPartnerSend[j] - cur_df$AbsSend[j]
if (type == 1) {
cur_payoff <- cur_df$AbsPartnerSend[j] * 3 - cur_df$AbsSend[j]
}
if (cur_payoff > best_payoff) {
best_payoff <- cur_payoff
best_payoff_index <- j
}
}
}
}
}
# predict based on the best memory
pred <- cur_df[best_payoff_index,]$RelSend
cbdt_predicts <- c(cbdt_predicts, pred)
}
}
print ("CBDT prediction")
# print (cur_df5$RelSend)
# print (predict(lm1, newdata = cur_df5))
# print (cbdt_predicts)
print (paste("R-squared:", cor(cur_df5$RelSend, cbdt_predicts)^2))
plot (x=1:nrow(cur_df5), y=cur_df5$RelSend, type = "o", col = col_list[1], lty = 1, xlim = c(0,nrow(cur_df5)+45), ylim = c(0,1), xlab = "Trial", ylab = "Send proportion", main = paste(GAME_NAMES[k]))
lines(predict(lm1, newdata = cur_df5), type = "o", col = col_list[2], lty = 2)
lines (cbdt_predicts, type = "o", col = col_list[3], lty = 3)
legend(y=1,x=nrow(cur_df5)+1, col=col_list[1:3], lty=1:3, c("Actual Behavior", "Trust-based prediction", "Case-based prediction"), type = "o")
}
CBDT_predict <- function (cur_df) {
print (paste("Analyze: ", Type_names[type+1], "for game:", GAME_NAMES[k]))
# print ("For  rounds 4 and 5")
print ("For Round 5 only")
cur_df$id <- as.factor (cur_df$id)
cur_df5 <- cur_df [cur_df$round_number_with_partner == 5,]
lm1 <- lm (RelSend ~ my_trust_value, data = cur_df5)
print ("Regeression with my trust value")
print (summary (lm1))
# CBDT for prediction
p_recall = 0.75  # probability to recall an experience
p_store = 0.5   # probability to store an experience to memory
cbdt_predicts <- c()  # vector contains predicting values of CBDT
# should have 75 elements in the end in Sender case
for (i in 1:nrow(cur_df5)) {
cur_row <- cur_df5[i,]
cur_id <- cur_row$id[1]
cur_period <- cur_row$period[1]
if (cur_row$RelSend[1] >= 0) {
# scan history to find the best memory
best_payoff <- 0
best_payoff_index <- 1
for (j in 1:nrow(cur_df)) {
# print (paste ("Processing row",j))
if (cur_id == cur_df[j,]$id) {
if (cur_period > cur_df[j,]$period) {
r <- runif (1, min = 0, max = 1)
if (r <= p_recall) {
# recall this experience cur_df[j,]
cur_payoff <- cur_df$AbsPartnerSend[j] - cur_df$AbsSend[j]
if (type == 1) {
cur_payoff <- cur_df$AbsPartnerSend[j] * 3 - cur_df$AbsSend[j]
}
if (cur_payoff > best_payoff) {
best_payoff <- cur_payoff
best_payoff_index <- j
}
}
}
}
}
# predict based on the best memory
pred <- cur_df[best_payoff_index,]$RelSend
cbdt_predicts <- c(cbdt_predicts, pred)
}
}
print ("CBDT prediction")
# print (cur_df5$RelSend)
# print (predict(lm1, newdata = cur_df5))
# print (cbdt_predicts)
print (paste("R-squared:", cor(cur_df5$RelSend, cbdt_predicts)^2))
plot (x=1:nrow(cur_df5), y=cur_df5$RelSend, type = "o", col = col_list[1], lty = 1, xlim = c(0,nrow(cur_df5)+45), ylim = c(0,1), xlab = "Trial", ylab = "Send proportion", main = paste(GAME_NAMES[k]))
lines(predict(lm1, newdata = cur_df5), type = "o", col = col_list[2], lty = 2)
lines (cbdt_predicts, type = "o", col = col_list[3], lty = 3)
legend(y=1,x=nrow(cur_df5)+1, col=col_list[1:3], lty=1:3, c("Actual Behavior", "Trust-based prediction", "Case-based prediction"))
}
all_df <- all_df_sender
if (type == 1) {
all_df <- all_df_receiver
}
# For Simple Game first
for (k in 1:1) {
cur_df <- as.data.frame(all_df[k])
CBDT_predict(cur_df)
}
library (caret)
for (type in 0:1) {
all_df <- all_df_sender
if (type == 1) {
all_df <- all_df_receiver
}
# For Simple Game first
for (k in 1:1) {
cur_df <- as.data.frame(all_df[k])
CBDT_predict(cur_df)
}
}
CBDT_predict <- function (cur_df, p_recall = 0.75, p_store = 0.5, round_number = 5, type = 0) {
print (paste("Analyze: ", Type_names[type+1], "for game:", GAME_NAMES[k]))
# print ("For  rounds 4 and 5")
print (paste("Round", round_number))
cur_df$id <- as.factor (cur_df$id)
cur_df5 <- cur_df [cur_df$round_number_with_partner == round_number,]
lm1 <- lm (RelSend ~ my_trust_value, data = cur_df5)
print ("Regeression with my trust value")
print (summary (lm1))
# CBDT for prediction
# p_recall = 0.75  # probability to recall an experience
# p_store = 0.5   # probability to store an experience to memory
cbdt_predicts <- c()  # vector contains predicting values of CBDT
# should have 75 elements in the end in Sender case
for (i in 1:nrow(cur_df5)) {
cur_row <- cur_df5[i,]
cur_id <- cur_row$id[1]
cur_period <- cur_row$period[1]
if (cur_row$RelSend[1] >= 0) {
# scan history to find the best memory
best_payoff <- 0
best_payoff_index <- 1
for (j in 1:nrow(cur_df)) {
# print (paste ("Processing row",j))
if (cur_id == cur_df[j,]$id) {
if (cur_period > cur_df[j,]$period) {
r <- runif (1, min = 0, max = 1)
if (r <= p_recall) {
# recall this experience cur_df[j,]
cur_payoff <- cur_df$AbsPartnerSend[j] - cur_df$AbsSend[j]
if (type == 1) {
cur_payoff <- cur_df$AbsPartnerSend[j] * 3 - cur_df$AbsSend[j]
}
if (cur_payoff > best_payoff) {
best_payoff <- cur_payoff
best_payoff_index <- j
}
}
}
}
}
# predict based on the best memory
pred <- cur_df[best_payoff_index,]$RelSend
cbdt_predicts <- c(cbdt_predicts, pred)
}
}
print ("CBDT prediction")
# print (cur_df5$RelSend)
# print (predict(lm1, newdata = cur_df5))
# print (cbdt_predicts)
print (paste("R-squared:", cor(cur_df5$RelSend, cbdt_predicts)^2))
plot (x=1:nrow(cur_df5), y=cur_df5$RelSend, type = "o", col = col_list[1], lty = 1, xlim = c(0,nrow(cur_df5)+45), ylim = c(0,1), xlab = "Trial", ylab = "Send proportion", main = paste(GAME_NAMES[k]))
lines(predict(lm1, newdata = cur_df5), type = "o", col = col_list[2], lty = 2)
lines (cbdt_predicts, type = "o", col = col_list[3], lty = 3)
legend(y=1,x=nrow(cur_df5)+1, col=col_list[1:3], lty=1:3, c("Actual Behavior", "Trust-based prediction", "Case-based prediction"))
}
library (caret)
for (type in 0:1) {
all_df <- all_df_sender
if (type == 1) {
all_df <- all_df_receiver
}
# For Simple Game first
for (k in 1:1) {
cur_df <- as.data.frame(all_df[k])
CBDT_predict(cur_df, round_number = 5, type = type)
}
}
?abs
CBDT_predict <- function (cur_df, p_recall = 0.75, p_store = 0.5, round_number = 5, type = 0) {
print (paste("Analyze: ", Type_names[type+1], "for game:", GAME_NAMES[k]))
# print ("For  rounds 4 and 5")
print (paste("Round", round_number))
cur_df$id <- as.factor (cur_df$id)
cur_df5 <- cur_df [cur_df$round_number_with_partner == round_number,]
lm1 <- lm (RelSend ~ my_trust_value, data = cur_df5)
print ("Regeression with my trust value")
print (summary (lm1))
# CBDT for prediction
# p_recall = 0.75  # probability to recall an experience
# p_store = 0.5   # probability to store an experience to memory
cbdt_predicts <- c()  # vector contains predicting values of CBDT
# should have 75 elements in the end in Sender case
for (i in 1:nrow(cur_df5)) {
cur_row <- cur_df5[i,]
cur_id <- cur_row$id[1]
cur_period <- cur_row$period[1]
if (cur_row$RelSend[1] >= 0) {
# scan history to find the best memory
best_payoff <- 0
best_payoff_index <- 1
for (j in 1:nrow(cur_df)) {
# print (paste ("Processing row",j))
if (cur_id == cur_df[j,]$id) {
if (cur_period > cur_df[j,]$period) {
r <- runif (1, min = 0, max = 1)
if (r <= p_recall) {
# recall this experience cur_df[j,]
if (type == 0) {
cur_payoff <- cur_df$AbsPartnerSend[j] - cur_df$AbsSend[j]
if (cur_payoff > best_payoff) {
best_payoff <- cur_payoff
best_payoff_index <- j
}
} else if (type == 1) {
if (abs(cur_df5$AbsPartnerSend[i] - cur_df$AbsPartnerSend[j]) < 1) {
for (j1 in (j+1):nrow(cur_df)) {
if (cur_df$id[j1,] == cur_id) {
cur_payoff <- cur_df[j+1,]$AbsPartnerSend
if (cur_payoff > best_payoff) {
best_payoff <- cur_payoff
best_payoff_index <- j
}
}
}
}
}
}
}
}
}
# predict based on the best memory
pred <- cur_df[best_payoff_index,]$RelSend
cbdt_predicts <- c(cbdt_predicts, pred)
}
}
print ("CBDT prediction")
# print (cur_df5$RelSend)
# print (predict(lm1, newdata = cur_df5))
# print (cbdt_predicts)
print (paste("R-squared:", cor(cur_df5$RelSend, cbdt_predicts)^2))
plot (x=1:nrow(cur_df5), y=cur_df5$RelSend, type = "o", col = col_list[1], lty = 1, xlim = c(0,nrow(cur_df5)+45), ylim = c(0,1), xlab = "Trial", ylab = "Send proportion", main = paste(GAME_NAMES[k]))
lines(predict(lm1, newdata = cur_df5), type = "o", col = col_list[2], lty = 2)
lines (cbdt_predicts, type = "o", col = col_list[3], lty = 3)
legend(y=1,x=nrow(cur_df5)+1, col=col_list[1:3], lty=1:3, c("Actual Behavior", "Trust-based prediction", "Case-based prediction"))
}
for (type in 0:1) {
all_df <- all_df_sender
if (type == 1) {
all_df <- all_df_receiver
}
# For Simple Game first
for (k in 1:1) {
cur_df <- as.data.frame(all_df[k])
CBDT_predict(cur_df, round_number = 5, type = type)
}
}
CBDT_predict <- function (cur_df, p_recall = 0.75, p_store = 0.5, round_number = 5, type = 0) {
print (paste("Analyze: ", Type_names[type+1], "for game:", GAME_NAMES[k]))
# print ("For  rounds 4 and 5")
print (paste("Round", round_number))
cur_df$id <- as.factor (cur_df$id)
cur_df5 <- cur_df [cur_df$round_number_with_partner == round_number,]
lm1 <- lm (RelSend ~ my_trust_value, data = cur_df5)
print ("Regeression with my trust value")
print (summary (lm1))
# CBDT for prediction
# p_recall = 0.75  # probability to recall an experience
# p_store = 0.5   # probability to store an experience to memory
cbdt_predicts <- c()  # vector contains predicting values of CBDT
# should have 75 elements in the end in Sender case
for (i in 1:nrow(cur_df5)) {
cur_row <- cur_df5[i,]
cur_id <- cur_row$id[1]
cur_period <- cur_row$period[1]
if (cur_row$RelSend[1] >= 0) {
# scan history to find the best memory
best_payoff <- 0
best_payoff_index <- 1
for (j in 1:nrow(cur_df)) {
# print (paste ("Processing row",j))
if (cur_id == cur_df[j,]$id) {
if (cur_period > cur_df[j,]$period) {
r <- runif (1, min = 0, max = 1)
if (r <= p_recall) {
# recall this experience cur_df[j,]
if (type == 0) {
cur_payoff <- cur_df$AbsPartnerSend[j] - cur_df$AbsSend[j]
if (cur_payoff > best_payoff) {
best_payoff <- cur_payoff
best_payoff_index <- j
}
} else if (type == 1) {
if (abs(cur_df5$AbsPartnerSend[i] - cur_df$AbsPartnerSend[j]) < 1) {
for (j1 in (j+1):nrow(cur_df)) {
print (j1)
if (cur_df$id[j1,] == cur_id) {
cur_payoff <- cur_df[j+1,]$AbsPartnerSend
if (cur_payoff > best_payoff) {
best_payoff <- cur_payoff
best_payoff_index <- j
}
}
}
}
}
}
}
}
}
# predict based on the best memory
pred <- cur_df[best_payoff_index,]$RelSend
cbdt_predicts <- c(cbdt_predicts, pred)
}
}
print ("CBDT prediction")
# print (cur_df5$RelSend)
# print (predict(lm1, newdata = cur_df5))
# print (cbdt_predicts)
print (paste("R-squared:", cor(cur_df5$RelSend, cbdt_predicts)^2))
plot (x=1:nrow(cur_df5), y=cur_df5$RelSend, type = "o", col = col_list[1], lty = 1, xlim = c(0,nrow(cur_df5)+45), ylim = c(0,1), xlab = "Trial", ylab = "Send proportion", main = paste(GAME_NAMES[k]))
lines(predict(lm1, newdata = cur_df5), type = "o", col = col_list[2], lty = 2)
lines (cbdt_predicts, type = "o", col = col_list[3], lty = 3)
legend(y=1,x=nrow(cur_df5)+1, col=col_list[1:3], lty=1:3, c("Actual Behavior", "Trust-based prediction", "Case-based prediction"))
}
for (type in 0:1) {
all_df <- all_df_sender
if (type == 1) {
all_df <- all_df_receiver
}
# For Simple Game first
for (k in 1:1) {
cur_df <- as.data.frame(all_df[k])
CBDT_predict(cur_df, round_number = 5, type = type)
}
}
CBDT_predict <- function (cur_df, p_recall = 0.75, p_store = 0.5, round_number = 5, type = 0) {
print (paste("Analyze: ", Type_names[type+1], "for game:", GAME_NAMES[k]))
# print ("For  rounds 4 and 5")
print (paste("Round", round_number))
cur_df$id <- as.factor (cur_df$id)
cur_df5 <- cur_df [cur_df$round_number_with_partner == round_number,]
lm1 <- lm (RelSend ~ my_trust_value, data = cur_df5)
print ("Regeression with my trust value")
print (summary (lm1))
# CBDT for prediction
# p_recall = 0.75  # probability to recall an experience
# p_store = 0.5   # probability to store an experience to memory
cbdt_predicts <- c()  # vector contains predicting values of CBDT
# should have 75 elements in the end in Sender case
for (i in 1:nrow(cur_df5)) {
cur_row <- cur_df5[i,]
cur_id <- cur_row$id[1]
cur_period <- cur_row$period[1]
if (cur_row$RelSend[1] >= 0) {
# scan history to find the best memory
best_payoff <- 0
best_payoff_index <- 1
for (j in 1:nrow(cur_df)) {
# print (paste ("Processing row",j))
if (cur_id == cur_df[j,]$id) {
if (cur_period > cur_df[j,]$period) {
r <- runif (1, min = 0, max = 1)
if (r <= p_recall) {
# recall this experience cur_df[j,]
if (type == 0) {
cur_payoff <- cur_df$AbsPartnerSend[j] - cur_df$AbsSend[j]
if (cur_payoff > best_payoff) {
best_payoff <- cur_payoff
best_payoff_index <- j
}
} else if (type == 1) {
if (abs(cur_df5$AbsPartnerSend[i] - cur_df$AbsPartnerSend[j]) < 1) {
for (j1 in (j+1):nrow(cur_df)) {
if (cur_df$id[j1] == cur_id) {
cur_payoff <- cur_df[j+1,]$AbsPartnerSend
if (cur_payoff > best_payoff) {
best_payoff <- cur_payoff
best_payoff_index <- j
}
}
}
}
}
}
}
}
}
# predict based on the best memory
pred <- cur_df[best_payoff_index,]$RelSend
cbdt_predicts <- c(cbdt_predicts, pred)
}
}
print ("CBDT prediction")
# print (cur_df5$RelSend)
# print (predict(lm1, newdata = cur_df5))
# print (cbdt_predicts)
print (paste("R-squared:", cor(cur_df5$RelSend, cbdt_predicts)^2))
plot (x=1:nrow(cur_df5), y=cur_df5$RelSend, type = "o", col = col_list[1], lty = 1, xlim = c(0,nrow(cur_df5)+45), ylim = c(0,1), xlab = "Trial", ylab = "Send proportion", main = paste(GAME_NAMES[k]))
lines(predict(lm1, newdata = cur_df5), type = "o", col = col_list[2], lty = 2)
lines (cbdt_predicts, type = "o", col = col_list[3], lty = 3)
legend(y=1,x=nrow(cur_df5)+1, col=col_list[1:3], lty=1:3, c("Actual Behavior", "Trust-based prediction", "Case-based prediction"))
}
for (type in 0:1) {
all_df <- all_df_sender
if (type == 1) {
all_df <- all_df_receiver
}
# For Simple Game first
for (k in 1:1) {
cur_df <- as.data.frame(all_df[k])
CBDT_predict(cur_df, round_number = 5, type = type)
}
}
CBDT_predict <- function (cur_df, p_recall = 0.75, p_store = 0.5, round_number = 5, type = 0) {
print (paste("Analyze: ", Type_names[type+1], "for game:", GAME_NAMES[k]))
# print ("For  rounds 4 and 5")
print (paste("Round", round_number))
cur_df$id <- as.factor (cur_df$id)
cur_df5 <- cur_df [cur_df$round_number_with_partner == round_number,]
lm1 <- lm (RelSend ~ my_trust_value, data = cur_df5)
# print ("Regeression with my trust value")
# print (summary (lm1))
# CBDT for prediction
# p_recall = 0.75  # probability to recall an experience
# p_store = 0.5   # probability to store an experience to memory
cbdt_predicts <- c()  # vector contains predicting values of CBDT
# should have 75 elements in the end in Sender case
for (i in 1:nrow(cur_df5)) {
cur_row <- cur_df5[i,]
cur_id <- cur_row$id[1]
cur_period <- cur_row$period[1]
if (cur_row$RelSend[1] >= 0) {
# scan history to find the best memory
best_payoff <- 0
best_payoff_index <- 1
for (j in 1:nrow(cur_df)) {
# print (paste ("Processing row",j))
if (cur_id == cur_df[j,]$id) {
if (cur_period > cur_df[j,]$period) {
r <- runif (1, min = 0, max = 1)
if (r <= p_recall) {
# recall this experience cur_df[j,]
if (type == 0) {
cur_payoff <- cur_df$AbsPartnerSend[j] - cur_df$AbsSend[j]
if (cur_payoff > best_payoff) {
best_payoff <- cur_payoff
best_payoff_index <- j
}
} else if (type == 1) {
if (abs(cur_df5$AbsPartnerSend[i] - cur_df$AbsPartnerSend[j]) < 1) {
for (j1 in (j+1):nrow(cur_df)) {
if (cur_df$id[j1] == cur_id) {
cur_payoff <- cur_df[j+1,]$AbsPartnerSend
if (cur_payoff > best_payoff) {
best_payoff <- cur_payoff
best_payoff_index <- j
}
}
}
}
}
}
}
}
}
# predict based on the best memory
pred <- cur_df[best_payoff_index,]$RelSend
cbdt_predicts <- c(cbdt_predicts, pred)
}
}
print ("CBDT prediction")
# print (cur_df5$RelSend)
# print (predict(lm1, newdata = cur_df5))
# print (cbdt_predicts)
print (paste("R-squared CBDT:", cor(cur_df5$RelSend, cbdt_predicts)^2))
print (paste("R-squared trust-based:", cor(cur_df5$RelSend, cur_df5$my_trust_value)^2))
print (paste("RMSE CBDT:", caret::RMSE(pred = cbdt_predicts, obs = cur_df5$RelSend)))
print (paste("RMSE trust:", caret::RMSE(pred = cur_df5$my_trust_value, obs = cur_df5$RelSend)))
plot (x=1:nrow(cur_df5), y=cur_df5$RelSend, type = "o", col = col_list[1], lty = 1, xlim = c(0,nrow(cur_df5)+45), ylim = c(0,1), xlab = "Trial", ylab = "Send proportion", main = paste(GAME_NAMES[k]))
lines(cur_df5$my_trust_value, type = "o", col = col_list[2], lty = 2)
lines (cbdt_predicts, type = "o", col = col_list[3], lty = 3)
legend(y=1,x=nrow(cur_df5)+1, col=col_list[1:3], lty=1:3, c("Actual Behavior", "Trust-based prediction", "Case-based prediction"))
}
library (caret)
for (type in 0:1) {
all_df <- all_df_sender
if (type == 1) {
all_df <- all_df_receiver
}
# For Simple Game first
for (k in 1:1) {
cur_df <- as.data.frame(all_df[k])
CBDT_predict(cur_df, round_number = 5, type = type)
}
}
library (caret)
for (type in 0:1) {
all_df <- all_df_sender
if (type == 1) {
all_df <- all_df_receiver
}
# For Simple Game first
for (k in 1:1) {
cur_df <- as.data.frame(all_df[k])
CBDT_predict(cur_df, round_number = 5, type = type)
}
}
