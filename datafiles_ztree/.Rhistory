# print (summary (l1))
# print (steps$anova)
}
}
}
for (type in 0:1) {
df_simple <- data.frame ("id" = as.numeric(),
"trust_value" = as.numeric(),
"RelSend" = as.numeric(),
"AbsSend" = as.numeric(),
"response_time" = as.numeric(),
"game_pos" = as.numeric(),
"peak_end_trust" = as.numeric(),
"AbsPartnerSend" = as.numeric(),
"my_trust_value" = as.numeric(),
"PartnerRelSend" = as.numeric(),
"my_reputation" = as.numeric(),
"partner_reputation" = as.numeric(),
"round_number_with_partner" = as.numeric(),  # indicate round number when play with a partner (1-5)
"partner_id" = as.numeric()
)
df_id <- data.frame ("id" = as.numeric(),
"trust_value" = as.numeric(),
"RelSend" = as.numeric(),
"AbsSend" = as.numeric(),
"response_time" = as.numeric(),
"game_pos" = as.numeric(),
"peak_end_trust" = as.numeric(),
"AbsPartnerSend" = as.numeric(),
"my_trust_value" = as.numeric(),
"PartnerRelSend" = as.numeric(),
"my_reputation" = as.numeric(),
"partner_reputation" = as.numeric(),
"round_number_with_partner" = as.numeric(),
"partner_id" = as.numeric()
)
df_score <- data.frame ("id" = as.numeric(),
"trust_value" = as.numeric(),
"RelSend" = as.numeric(),
"AbsSend" = as.numeric(),
"response_time" = as.numeric(),
"game_pos" = as.numeric(),
"peak_end_trust" = as.numeric(),
"AbsPartnerSend" = as.numeric(),
"my_trust_value" = as.numeric(),
"PartnerRelSend" = as.numeric(),
"my_reputation" = as.numeric(),
"partner_reputation" = as.numeric(),
"round_number_with_partner" = as.numeric(),
"partner_id" = as.numeric()
)
df_combine <- data.frame ("id" = as.numeric(),
"trust_value" = as.numeric(),
"RelSend" = as.numeric(),
"AbsSend" = as.numeric(),
"response_time" = as.numeric(),
"game_pos" = as.numeric(),
"peak_end_trust" = as.numeric(),
"AbsPartnerSend" = as.numeric(),
"my_trust_value" = as.numeric(),
"PartnerRelSend" = as.numeric(),
"my_reputation" = as.numeric(),
"partner_reputation" = as.numeric(),
"round_number_with_partner" = as.numeric(),
"partner_id" = as.numeric()
)
for (exp_id in 1:num_exp) {
first_round_of_exp_subjects = (exp_id - 1) * num_rounds_per_game * num_users + 1
last_round_of_exp_subjects = exp_id * num_rounds_per_game * num_users
simple_game = simple_games[first_round_of_exp_subjects:last_round_of_exp_subjects,]
id_game = id_games [first_round_of_exp_subjects:last_round_of_exp_subjects,]
score_game = score_games [first_round_of_exp_subjects:last_round_of_exp_subjects,]
combine_game = combine_games[first_round_of_exp_subjects:last_round_of_exp_subjects,]
all_game <- list (simple_game, id_game, score_game, combine_game)
for (k in 1:num_games) {
cur_game <- as.data.frame(all_game[k])
round_number_with_partners = c(0,0,0,0,0,0)
for (user_id in 1:num_users) {
cur_reputation = 0.5
partner_reputation = 0.5
for (i in 1:nrow(cur_game)) {
if (cur_game[i,]$Subject == user_id) {
partner_id <- cur_game[i,]$Partner
round_number_with_partners[partner_id] <- round_number_with_partners[partner_id] + 1
if (cur_game[i,]$my_send_proportional >= 0 & cur_game[i,]$Type == type) {
my_trust_score = cur_game[cur_game$Type == (1  - type) & cur_game$Partner == user_id
& cur_game$Period == cur_game[i,]$Period,]$showing_trust_score
if (cur_game[i,]$Period %% 25 > 1 | cur_game[i,]$Period %% 25 == 0) {
# calculate my reputation
cur_period = cur_game[i,]$Period
cur_reputation = mean (cur_game[cur_game$Subject == user_id
& cur_game$Period < cur_period
& cur_game$my_send_proportional >= 0,]$my_send_proportional)
if (is.nan(cur_reputation)) {
cur_reputation = 0.5
}
# calculate partner reputation
partner_id <- cur_game[i,]$Partner
partner_reputation = mean (cur_game[cur_game$Subject == partner_id
& cur_game$Period < cur_period
& cur_game$my_send_proportional >= 0,]$my_send_proportional)
if (is.nan (partner_reputation)) {
partner_reputation = 0.5
}
} else {
cur_reputation = 0.5
partner_reputation = 0.5
}
new_row = c((exp_id - 1) * num_users + user_id,
(cur_game[i,]$showing_trust_score),
(cur_game[i,]$my_send_proportional),
(cur_game[i,]$Contribution),
(cur_game[i,]$response_time),
SIMPLE_GAME_ORDERS[exp_id],
(calc_peak_end_trust(cur_game[i,]$showing_trust_score)),
(cur_game[i,]$PartnerDecision),
my_trust_score,
(cur_game[i,]$send_proportion),
cur_reputation,
partner_reputation,
ifelse (round_number_with_partners[partner_id] %% 5 == 0,5,round_number_with_partners[partner_id] %% 5),
ifelse(partner_id < user_id, partner_id, partner_id - 1)
)
if (k == 1) {
df_simple[nrow(df_simple) + 1,] <- new_row
} else if (k == 2) {
df_id[nrow(df_id) + 1,] <- new_row
} else if (k == 3) {
df_score[nrow(df_score) + 1,] <- new_row
} else if (k == 4) {
df_combine[nrow(df_combine) + 1,] <- new_row
}
}
}
}
}
}
}
all_df <- list (df_simple, df_id, df_score, df_combine)
require(MASS) #for variable selection
require(relaimpo)
# for (k in 1:num_games) {
#   for (round_number in 2:5) {
#     cur_df <- as.data.frame(all_df[k])
#     print (paste("Analyze: ", Type_names[type+1], "for game:", GAME_NAMES[k]))
#     print (paste("ROUND:", round_number))
#     # print ("Residual on subject then multiple regression")
#     cur_df$id <- as.factor (cur_df$id)
#     cur_df <- cur_df [cur_df$round_number_with_partner == round_number,]
#     cur_df$resid <- residuals(lm(RelSend~id, data=cur_df))
#     # print (cor.test(cur_df$resid, cur_df$my_trust_value))
#     # print (cor.test(cur_df$resid, cur_df$my_reputation))
#     # print (cor.test(cur_df$partner_reputation, cur_df$trust_value))
#     if (type == 0) {
#       # l1 <- lm (RelSend ~ id + my_trust_value + trust_value, data = cur_game)
#       l1 <- lm (RelSend ~ my_trust_value + my_reputation + trust_value + partner_reputation, data=cur_df)
#       print (summary (l1))
#       # print (Anova(l1, type = "III"))
#
#       #variable selection
#       print ("variable selection")
#       steps <- MASS::stepAIC(l1)
#       print (steps$anova)
#
#       # variable importance
#       # relimp <- calc.relimp(l1,type=c("lmg","last","first","pratt"),rela=TRUE)
#       # print (relimp)
#     }
#     else if (type == 1) {
#       # l1 <- lm (RelSend ~ id + my_trust_value + trust_value, data = cur_game)
#       l1 <- lm (RelSend ~ my_trust_value + my_reputation + trust_value + partner_reputation + AbsPartnerSend, data = cur_df)
#       print (summary (l1))
#       # print (Anova(l1, type = "III"))
#
#       #variable selection
#       print ("variable selection")
#       steps <- MASS::stepAIC(l1)
#       print (steps$anova)
#
#       # variable importance
#       # relimp <- calc.relimp(l1,type=c("lmg","last","first","pratt"),rela=TRUE)
#       # print (relimp)
#     }
#   }
# }
for (k in 1:num_games) {
cur_df <- as.data.frame(all_df[k])
print (paste("Analyze: ", Type_names[type+1], "for game:", GAME_NAMES[k]))
# print ("For  rounds 4 and 5")
print ("For Round 5 only")
print ("Residual on subject then multiple regression")
cur_df$id <- as.factor (cur_df$id)
cur_df <- cur_df [cur_df$round_number_with_partner == 5,]
cur_df$resid <- residuals(lm(RelSend~id, data=cur_df))
cur_df$round_number_with_partner <- as.factor(cur_df$round_number_with_partner)
cur_df$partner_id <- as.factor(cur_df$partner_id)
# print (cor.test(cur_df$resid, cur_df$my_trust_value))
# print (cor.test(cur_df$resid, cur_df$my_reputation))
# print (cor.test(cur_df$partner_reputation, cur_df$trust_value))
if (type == 0) {
# l1 <- lm (RelSend ~ id + my_trust_value + trust_value, data = cur_game)
l1 <- lm (RelSend ~ my_trust_value + trust_value + my_trust_value * trust_value, data=cur_df)
# l1 <- lm (resid ~ my_trust_value + trust_value + round_number_with_partner, data=cur_df)
print (summary (l1))
# l1 <- lm (RelSend ~ my_trust_value + trust_value + my_trust_value * trust_value, data=cur_df[cur_df$trust_value >= median(cur_df$trust_value),])
# print (summary (l1))
# l1 <- lm (RelSend ~ my_trust_value + trust_value + my_trust_value * trust_value, data=cur_df[cur_df$trust_value < median(cur_df$trust_value),])
# print (summary (l1))
# stepwise regression
steps <- MASS::stepAIC(l1)
print (steps$anova)
} else if (type == 1) {
# l1 <- lm (RelSend ~ id + my_trust_value + trust_value, data = cur_game)
# l1 <- lm (RelSend ~ my_trust_value  + trust_value*AbsPartnerSend, data = cur_df)
l1 <- lm (RelSend ~ my_trust_value  + trust_value + AbsPartnerSend + trust_value * my_trust_value * AbsPartnerSend, data = cur_df)
# l1 <- lm (resid ~ my_trust_value + trust_value + AbsPartnerSend + round_number_with_partner, data=cur_df)
print (summary (l1))
# # stepwise regression
steps <- MASS::stepAIC(l1)
print (steps$anova)
# divide the dataset to study the interaction
# date: Mon 19-Jun-2017
# l1 <- lm (RelSend ~ my_trust_value  + trust_value + AbsPartnerSend + trust_value * my_trust_value  + trust_value * AbsPartnerSend +
#             my_trust_value * AbsPartnerSend,
#           data=cur_df[cur_df$AbsPartnerSend >= median(cur_df$AbsPartnerSend),])
# print (summary (l1))
# steps <- MASS::stepAIC(l1)
# print (steps$anova)
#
# print ("--------")
# l1 <- lm (RelSend ~ my_trust_value  + trust_value,
#           data=cur_df[cur_df$AbsPartnerSend >= median(cur_df$AbsPartnerSend),])
# print (summary (l1))
# steps <- MASS::stepAIC(l1)
# print (steps$anova)
# print ("_-----------------------------------")
# l1 <- lm (RelSend ~ my_trust_value  + trust_value + AbsPartnerSend + trust_value * my_trust_value  + trust_value * AbsPartnerSend +
#             my_trust_value * AbsPartnerSend,
#           data=cur_df[cur_df$AbsPartnerSend < median(cur_df$AbsPartnerSend),])
# steps <- MASS::stepAIC(l1)
# print (summary (l1))
# print (steps$anova)
}
}
}
prepare_individual_behavior_data <- function (type = 0) {
df_simple <- data.frame ("id" = as.numeric(),
"trust_value" = as.numeric(),
"RelSend" = as.numeric(),
"AbsSend" = as.numeric(),
"response_time" = as.numeric(),
"game_pos" = as.numeric(),
"peak_end_trust" = as.numeric(),
"AbsPartnerSend" = as.numeric(),
"my_trust_value" = as.numeric(),
"PartnerRelSend" = as.numeric(),
"my_reputation" = as.numeric(),
"partner_reputation" = as.numeric(),
"round_number_with_partner" = as.numeric(),  # indicate round number when play with a partner (1-5)
"partner_id" = as.numeric()
)
df_id <- data.frame ("id" = as.numeric(),
"trust_value" = as.numeric(),
"RelSend" = as.numeric(),
"AbsSend" = as.numeric(),
"response_time" = as.numeric(),
"game_pos" = as.numeric(),
"peak_end_trust" = as.numeric(),
"AbsPartnerSend" = as.numeric(),
"my_trust_value" = as.numeric(),
"PartnerRelSend" = as.numeric(),
"my_reputation" = as.numeric(),
"partner_reputation" = as.numeric(),
"round_number_with_partner" = as.numeric(),
"partner_id" = as.numeric()
)
df_score <- data.frame ("id" = as.numeric(),
"trust_value" = as.numeric(),
"RelSend" = as.numeric(),
"AbsSend" = as.numeric(),
"response_time" = as.numeric(),
"game_pos" = as.numeric(),
"peak_end_trust" = as.numeric(),
"AbsPartnerSend" = as.numeric(),
"my_trust_value" = as.numeric(),
"PartnerRelSend" = as.numeric(),
"my_reputation" = as.numeric(),
"partner_reputation" = as.numeric(),
"round_number_with_partner" = as.numeric(),
"partner_id" = as.numeric()
)
df_combine <- data.frame ("id" = as.numeric(),
"trust_value" = as.numeric(),
"RelSend" = as.numeric(),
"AbsSend" = as.numeric(),
"response_time" = as.numeric(),
"game_pos" = as.numeric(),
"peak_end_trust" = as.numeric(),
"AbsPartnerSend" = as.numeric(),
"my_trust_value" = as.numeric(),
"PartnerRelSend" = as.numeric(),
"my_reputation" = as.numeric(),
"partner_reputation" = as.numeric(),
"round_number_with_partner" = as.numeric(),
"partner_id" = as.numeric()
)
for (exp_id in 1:num_exp) {
first_round_of_exp_subjects = (exp_id - 1) * num_rounds_per_game * num_users + 1
last_round_of_exp_subjects = exp_id * num_rounds_per_game * num_users
simple_game = simple_games[first_round_of_exp_subjects:last_round_of_exp_subjects,]
id_game = id_games [first_round_of_exp_subjects:last_round_of_exp_subjects,]
score_game = score_games [first_round_of_exp_subjects:last_round_of_exp_subjects,]
combine_game = combine_games[first_round_of_exp_subjects:last_round_of_exp_subjects,]
all_game <- list (simple_game, id_game, score_game, combine_game)
for (k in 1:num_games) {
cur_game <- as.data.frame(all_game[k])
round_number_with_partners = c(0,0,0,0,0,0)
for (user_id in 1:num_users) {
cur_reputation = 0.5
partner_reputation = 0.5
for (i in 1:nrow(cur_game)) {
if (cur_game[i,]$Subject == user_id) {
partner_id <- cur_game[i,]$Partner
round_number_with_partners[partner_id] <- round_number_with_partners[partner_id] + 1
if (cur_game[i,]$my_send_proportional >= 0 & cur_game[i,]$Type == type) {
my_trust_score = cur_game[cur_game$Type == (1  - type) & cur_game$Partner == user_id
& cur_game$Period == cur_game[i,]$Period,]$showing_trust_score
if (cur_game[i,]$Period %% 25 > 1 | cur_game[i,]$Period %% 25 == 0) {
# calculate my reputation
cur_period = cur_game[i,]$Period
cur_reputation = mean (cur_game[cur_game$Subject == user_id
& cur_game$Period < cur_period
& cur_game$my_send_proportional >= 0,]$my_send_proportional)
if (is.nan(cur_reputation)) {
cur_reputation = 0.5
}
# calculate partner reputation
partner_id <- cur_game[i,]$Partner
partner_reputation = mean (cur_game[cur_game$Subject == partner_id
& cur_game$Period < cur_period
& cur_game$my_send_proportional >= 0,]$my_send_proportional)
if (is.nan (partner_reputation)) {
partner_reputation = 0.5
}
} else {
cur_reputation = 0.5
partner_reputation = 0.5
}
new_row = c((exp_id - 1) * num_users + user_id,
(cur_game[i,]$showing_trust_score),
(cur_game[i,]$my_send_proportional),
(cur_game[i,]$Contribution),
(cur_game[i,]$response_time),
SIMPLE_GAME_ORDERS[exp_id],
(calc_peak_end_trust(cur_game[i,]$showing_trust_score)),
(cur_game[i,]$PartnerDecision),
my_trust_score,
(cur_game[i,]$send_proportion),
cur_reputation,
partner_reputation,
ifelse (round_number_with_partners[partner_id] %% 5 == 0,5,round_number_with_partners[partner_id] %% 5),
ifelse(partner_id < user_id, partner_id, partner_id - 1)
)
if (k == 1) {
df_simple[nrow(df_simple) + 1,] <- new_row
} else if (k == 2) {
df_id[nrow(df_id) + 1,] <- new_row
} else if (k == 3) {
df_score[nrow(df_score) + 1,] <- new_row
} else if (k == 4) {
df_combine[nrow(df_combine) + 1,] <- new_row
}
}
}
}
}
}
}
all_df <- list (df_simple, df_id, df_score, df_combine)
all_df
}
all_df <- prepare_individual_behavior_data(type = 0)
all_df_sender <- all_df
all_df_receiver <- prepare_individual_behavior_data(1)
for (type in 0:1) {
all_df <- all_df_sender
if (type == 1) {
all_df <- all_df_receiver
}
require(MASS) #for variable selection
require(relaimpo)
# for (k in 1:num_games) {
#   for (round_number in 2:5) {
#     cur_df <- as.data.frame(all_df[k])
#     print (paste("Analyze: ", Type_names[type+1], "for game:", GAME_NAMES[k]))
#     print (paste("ROUND:", round_number))
#     # print ("Residual on subject then multiple regression")
#     cur_df$id <- as.factor (cur_df$id)
#     cur_df <- cur_df [cur_df$round_number_with_partner == round_number,]
#     cur_df$resid <- residuals(lm(RelSend~id, data=cur_df))
#     # print (cor.test(cur_df$resid, cur_df$my_trust_value))
#     # print (cor.test(cur_df$resid, cur_df$my_reputation))
#     # print (cor.test(cur_df$partner_reputation, cur_df$trust_value))
#     if (type == 0) {
#       # l1 <- lm (RelSend ~ id + my_trust_value + trust_value, data = cur_game)
#       l1 <- lm (RelSend ~ my_trust_value + my_reputation + trust_value + partner_reputation, data=cur_df)
#       print (summary (l1))
#       # print (Anova(l1, type = "III"))
#
#       #variable selection
#       print ("variable selection")
#       steps <- MASS::stepAIC(l1)
#       print (steps$anova)
#
#       # variable importance
#       # relimp <- calc.relimp(l1,type=c("lmg","last","first","pratt"),rela=TRUE)
#       # print (relimp)
#     }
#     else if (type == 1) {
#       # l1 <- lm (RelSend ~ id + my_trust_value + trust_value, data = cur_game)
#       l1 <- lm (RelSend ~ my_trust_value + my_reputation + trust_value + partner_reputation + AbsPartnerSend, data = cur_df)
#       print (summary (l1))
#       # print (Anova(l1, type = "III"))
#
#       #variable selection
#       print ("variable selection")
#       steps <- MASS::stepAIC(l1)
#       print (steps$anova)
#
#       # variable importance
#       # relimp <- calc.relimp(l1,type=c("lmg","last","first","pratt"),rela=TRUE)
#       # print (relimp)
#     }
#   }
# }
for (k in 1:num_games) {
cur_df <- as.data.frame(all_df[k])
print (paste("Analyze: ", Type_names[type+1], "for game:", GAME_NAMES[k]))
# print ("For  rounds 4 and 5")
print ("For Round 5 only")
print ("Residual on subject then multiple regression")
cur_df$id <- as.factor (cur_df$id)
cur_df <- cur_df [cur_df$round_number_with_partner == 5,]
cur_df$resid <- residuals(lm(RelSend~id, data=cur_df))
cur_df$round_number_with_partner <- as.factor(cur_df$round_number_with_partner)
cur_df$partner_id <- as.factor(cur_df$partner_id)
# print (cor.test(cur_df$resid, cur_df$my_trust_value))
# print (cor.test(cur_df$resid, cur_df$my_reputation))
# print (cor.test(cur_df$partner_reputation, cur_df$trust_value))
if (type == 0) {
# l1 <- lm (RelSend ~ id + my_trust_value + trust_value, data = cur_game)
l1 <- lm (RelSend ~ my_trust_value + trust_value + my_trust_value * trust_value, data=cur_df)
# l1 <- lm (resid ~ my_trust_value + trust_value + round_number_with_partner, data=cur_df)
print (summary (l1))
# l1 <- lm (RelSend ~ my_trust_value + trust_value + my_trust_value * trust_value, data=cur_df[cur_df$trust_value >= median(cur_df$trust_value),])
# print (summary (l1))
# l1 <- lm (RelSend ~ my_trust_value + trust_value + my_trust_value * trust_value, data=cur_df[cur_df$trust_value < median(cur_df$trust_value),])
# print (summary (l1))
# stepwise regression
steps <- MASS::stepAIC(l1)
print (steps$anova)
} else if (type == 1) {
# l1 <- lm (RelSend ~ id + my_trust_value + trust_value, data = cur_game)
# l1 <- lm (RelSend ~ my_trust_value  + trust_value*AbsPartnerSend, data = cur_df)
l1 <- lm (RelSend ~ my_trust_value  + trust_value + AbsPartnerSend + trust_value * my_trust_value * AbsPartnerSend, data = cur_df)
# l1 <- lm (resid ~ my_trust_value + trust_value + AbsPartnerSend + round_number_with_partner, data=cur_df)
print (summary (l1))
# # stepwise regression
steps <- MASS::stepAIC(l1)
print (steps$anova)
# divide the dataset to study the interaction
# date: Mon 19-Jun-2017
# l1 <- lm (RelSend ~ my_trust_value  + trust_value + AbsPartnerSend + trust_value * my_trust_value  + trust_value * AbsPartnerSend +
#             my_trust_value * AbsPartnerSend,
#           data=cur_df[cur_df$AbsPartnerSend >= median(cur_df$AbsPartnerSend),])
# print (summary (l1))
# steps <- MASS::stepAIC(l1)
# print (steps$anova)
#
# print ("--------")
# l1 <- lm (RelSend ~ my_trust_value  + trust_value,
#           data=cur_df[cur_df$AbsPartnerSend >= median(cur_df$AbsPartnerSend),])
# print (summary (l1))
# steps <- MASS::stepAIC(l1)
# print (steps$anova)
# print ("_-----------------------------------")
# l1 <- lm (RelSend ~ my_trust_value  + trust_value + AbsPartnerSend + trust_value * my_trust_value  + trust_value * AbsPartnerSend +
#             my_trust_value * AbsPartnerSend,
#           data=cur_df[cur_df$AbsPartnerSend < median(cur_df$AbsPartnerSend),])
# steps <- MASS::stepAIC(l1)
# print (summary (l1))
# print (steps$anova)
}
}
}
# Convert a vector to Z_score
make_scale <- function (v, num_grp) {
res = as.numeric()
num_row_per_grp = length(v) / num_grp
for (grp_id in 1:num_grp) {
first_round = 1 + num_row_per_grp * (grp_id - 1)
last_round = num_row_per_grp * grp_id
cur_data <- v[first_round:last_round]
mean_cur_data <- mean (cur_data)
sd_cur_data <- pop.sd(cur_data)
for (user_id in 1:num_row_per_grp) {
z_value = (cur_data[user_id] - mean_cur_data) / sd_cur_data
res <- c (res, z_value)
}
}
res
}
